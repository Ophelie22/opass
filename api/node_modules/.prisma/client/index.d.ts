
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model Pass
 * 
 */
export type Pass = $Result.DefaultSelection<Prisma.$PassPayload>
/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model Site
 * 
 */
export type Site = $Result.DefaultSelection<Prisma.$SitePayload>
/**
 * Model SiteCategory
 * 
 */
export type SiteCategory = $Result.DefaultSelection<Prisma.$SiteCategoryPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model SiteUser
 * 
 */
export type SiteUser = $Result.DefaultSelection<Prisma.$SiteUserPayload>
/**
 * Model Package
 * 
 */
export type Package = $Result.DefaultSelection<Prisma.$PackagePayload>
/**
 * Model SitePackage
 * 
 */
export type SitePackage = $Result.DefaultSelection<Prisma.$SitePackagePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs>;

  /**
   * `prisma.pass`: Exposes CRUD operations for the **Pass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Passes
    * const passes = await prisma.pass.findMany()
    * ```
    */
  get pass(): Prisma.PassDelegate<ExtArgs>;

  /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs>;

  /**
   * `prisma.site`: Exposes CRUD operations for the **Site** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sites
    * const sites = await prisma.site.findMany()
    * ```
    */
  get site(): Prisma.SiteDelegate<ExtArgs>;

  /**
   * `prisma.siteCategory`: Exposes CRUD operations for the **SiteCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SiteCategories
    * const siteCategories = await prisma.siteCategory.findMany()
    * ```
    */
  get siteCategory(): Prisma.SiteCategoryDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.siteUser`: Exposes CRUD operations for the **SiteUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SiteUsers
    * const siteUsers = await prisma.siteUser.findMany()
    * ```
    */
  get siteUser(): Prisma.SiteUserDelegate<ExtArgs>;

  /**
   * `prisma.package`: Exposes CRUD operations for the **Package** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Packages
    * const packages = await prisma.package.findMany()
    * ```
    */
  get package(): Prisma.PackageDelegate<ExtArgs>;

  /**
   * `prisma.sitePackage`: Exposes CRUD operations for the **SitePackage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SitePackages
    * const sitePackages = await prisma.sitePackage.findMany()
    * ```
    */
  get sitePackage(): Prisma.SitePackageDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Order: 'Order',
    Pass: 'Pass',
    Region: 'Region',
    Site: 'Site',
    SiteCategory: 'SiteCategory',
    Event: 'Event',
    SiteUser: 'SiteUser',
    Package: 'Package',
    SitePackage: 'SitePackage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "order" | "pass" | "region" | "site" | "siteCategory" | "event" | "siteUser" | "package" | "sitePackage"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      Pass: {
        payload: Prisma.$PassPayload<ExtArgs>
        fields: Prisma.PassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassPayload>
          }
          findFirst: {
            args: Prisma.PassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassPayload>
          }
          findMany: {
            args: Prisma.PassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassPayload>[]
          }
          create: {
            args: Prisma.PassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassPayload>
          }
          createMany: {
            args: Prisma.PassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassPayload>[]
          }
          delete: {
            args: Prisma.PassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassPayload>
          }
          update: {
            args: Prisma.PassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassPayload>
          }
          deleteMany: {
            args: Prisma.PassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassPayload>
          }
          aggregate: {
            args: Prisma.PassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePass>
          }
          groupBy: {
            args: Prisma.PassGroupByArgs<ExtArgs>
            result: $Utils.Optional<PassGroupByOutputType>[]
          }
          count: {
            args: Prisma.PassCountArgs<ExtArgs>
            result: $Utils.Optional<PassCountAggregateOutputType> | number
          }
        }
      }
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      Site: {
        payload: Prisma.$SitePayload<ExtArgs>
        fields: Prisma.SiteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SiteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          findFirst: {
            args: Prisma.SiteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          findMany: {
            args: Prisma.SiteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>[]
          }
          create: {
            args: Prisma.SiteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          createMany: {
            args: Prisma.SiteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SiteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>[]
          }
          delete: {
            args: Prisma.SiteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          update: {
            args: Prisma.SiteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          deleteMany: {
            args: Prisma.SiteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SiteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SiteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          aggregate: {
            args: Prisma.SiteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSite>
          }
          groupBy: {
            args: Prisma.SiteGroupByArgs<ExtArgs>
            result: $Utils.Optional<SiteGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteCountArgs<ExtArgs>
            result: $Utils.Optional<SiteCountAggregateOutputType> | number
          }
        }
      }
      SiteCategory: {
        payload: Prisma.$SiteCategoryPayload<ExtArgs>
        fields: Prisma.SiteCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SiteCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteCategoryPayload>
          }
          findFirst: {
            args: Prisma.SiteCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteCategoryPayload>
          }
          findMany: {
            args: Prisma.SiteCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteCategoryPayload>[]
          }
          create: {
            args: Prisma.SiteCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteCategoryPayload>
          }
          createMany: {
            args: Prisma.SiteCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SiteCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteCategoryPayload>[]
          }
          delete: {
            args: Prisma.SiteCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteCategoryPayload>
          }
          update: {
            args: Prisma.SiteCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteCategoryPayload>
          }
          deleteMany: {
            args: Prisma.SiteCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SiteCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SiteCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteCategoryPayload>
          }
          aggregate: {
            args: Prisma.SiteCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSiteCategory>
          }
          groupBy: {
            args: Prisma.SiteCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SiteCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<SiteCategoryCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      SiteUser: {
        payload: Prisma.$SiteUserPayload<ExtArgs>
        fields: Prisma.SiteUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SiteUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteUserPayload>
          }
          findFirst: {
            args: Prisma.SiteUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteUserPayload>
          }
          findMany: {
            args: Prisma.SiteUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteUserPayload>[]
          }
          create: {
            args: Prisma.SiteUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteUserPayload>
          }
          createMany: {
            args: Prisma.SiteUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SiteUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteUserPayload>[]
          }
          delete: {
            args: Prisma.SiteUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteUserPayload>
          }
          update: {
            args: Prisma.SiteUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteUserPayload>
          }
          deleteMany: {
            args: Prisma.SiteUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SiteUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SiteUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SiteUserPayload>
          }
          aggregate: {
            args: Prisma.SiteUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSiteUser>
          }
          groupBy: {
            args: Prisma.SiteUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<SiteUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteUserCountArgs<ExtArgs>
            result: $Utils.Optional<SiteUserCountAggregateOutputType> | number
          }
        }
      }
      Package: {
        payload: Prisma.$PackagePayload<ExtArgs>
        fields: Prisma.PackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findFirst: {
            args: Prisma.PackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findMany: {
            args: Prisma.PackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          create: {
            args: Prisma.PackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          createMany: {
            args: Prisma.PackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          delete: {
            args: Prisma.PackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          update: {
            args: Prisma.PackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          deleteMany: {
            args: Prisma.PackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          aggregate: {
            args: Prisma.PackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackage>
          }
          groupBy: {
            args: Prisma.PackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageCountArgs<ExtArgs>
            result: $Utils.Optional<PackageCountAggregateOutputType> | number
          }
        }
      }
      SitePackage: {
        payload: Prisma.$SitePackagePayload<ExtArgs>
        fields: Prisma.SitePackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SitePackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SitePackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePackagePayload>
          }
          findFirst: {
            args: Prisma.SitePackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SitePackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePackagePayload>
          }
          findMany: {
            args: Prisma.SitePackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePackagePayload>[]
          }
          create: {
            args: Prisma.SitePackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePackagePayload>
          }
          createMany: {
            args: Prisma.SitePackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SitePackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePackagePayload>[]
          }
          delete: {
            args: Prisma.SitePackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePackagePayload>
          }
          update: {
            args: Prisma.SitePackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePackagePayload>
          }
          deleteMany: {
            args: Prisma.SitePackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SitePackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SitePackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePackagePayload>
          }
          aggregate: {
            args: Prisma.SitePackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSitePackage>
          }
          groupBy: {
            args: Prisma.SitePackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<SitePackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.SitePackageCountArgs<ExtArgs>
            result: $Utils.Optional<SitePackageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    orders: number
    passes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    passes?: boolean | UserCountOutputTypeCountPassesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    passes: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passes?: boolean | OrderCountOutputTypeCountPassesArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountPassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassWhereInput
  }


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    sites: number
    packages: number
    categories: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sites?: boolean | RegionCountOutputTypeCountSitesArgs
    packages?: boolean | RegionCountOutputTypeCountPackagesArgs
    categories?: boolean | RegionCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountSitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteCategoryWhereInput
  }


  /**
   * Count Type SiteCountOutputType
   */

  export type SiteCountOutputType = {
    events: number
    siteUsers: number
    sitePackage: number
  }

  export type SiteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | SiteCountOutputTypeCountEventsArgs
    siteUsers?: boolean | SiteCountOutputTypeCountSiteUsersArgs
    sitePackage?: boolean | SiteCountOutputTypeCountSitePackageArgs
  }

  // Custom InputTypes
  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCountOutputType
     */
    select?: SiteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeCountSiteUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteUserWhereInput
  }

  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeCountSitePackageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SitePackageWhereInput
  }


  /**
   * Count Type SiteCategoryCountOutputType
   */

  export type SiteCategoryCountOutputType = {
    sites: number
  }

  export type SiteCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sites?: boolean | SiteCategoryCountOutputTypeCountSitesArgs
  }

  // Custom InputTypes
  /**
   * SiteCategoryCountOutputType without action
   */
  export type SiteCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategoryCountOutputType
     */
    select?: SiteCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SiteCategoryCountOutputType without action
   */
  export type SiteCategoryCountOutputTypeCountSitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
  }


  /**
   * Count Type PackageCountOutputType
   */

  export type PackageCountOutputType = {
    passes: number
    sitePackages: number
  }

  export type PackageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passes?: boolean | PackageCountOutputTypeCountPassesArgs
    sitePackages?: boolean | PackageCountOutputTypeCountSitePackagesArgs
  }

  // Custom InputTypes
  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageCountOutputType
     */
    select?: PackageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountPassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassWhereInput
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountSitePackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SitePackageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    createAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    createAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    createAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    createAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    createAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    createAt?: boolean
    updatedAt?: boolean
    orders?: boolean | User$ordersArgs<ExtArgs>
    passes?: boolean | User$passesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    createAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    createAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | User$ordersArgs<ExtArgs>
    passes?: boolean | User$passesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
      passes: Prisma.$PassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      createAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null>
    passes<T extends User$passesArgs<ExtArgs> = {}>(args?: Subset<T, User$passesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.passes
   */
  export type User$passesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    where?: PassWhereInput
    orderBy?: PassOrderByWithRelationInput | PassOrderByWithRelationInput[]
    cursor?: PassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PassScalarFieldEnum | PassScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: Decimal | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    userId: number | null
    amount: Decimal | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    userId: number | null
    date: Date | null
    amount: Decimal | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    date: Date | null
    amount: Decimal | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    userId: number
    date: number
    amount: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    userId: number
    date: Date
    amount: Decimal
    status: string
    createdAt: Date
    updatedAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    passes?: boolean | Order$passesArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    userId?: boolean
    date?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    passes?: boolean | Order$passesArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      passes: Prisma.$PassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      date: Date
      amount: Prisma.Decimal
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    passes<T extends Order$passesArgs<ExtArgs> = {}>(args?: Subset<T, Order$passesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly userId: FieldRef<"Order", 'Int'>
    readonly date: FieldRef<"Order", 'DateTime'>
    readonly amount: FieldRef<"Order", 'Decimal'>
    readonly status: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }

  /**
   * Order.passes
   */
  export type Order$passesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    where?: PassWhereInput
    orderBy?: PassOrderByWithRelationInput | PassOrderByWithRelationInput[]
    cursor?: PassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PassScalarFieldEnum | PassScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model Pass
   */

  export type AggregatePass = {
    _count: PassCountAggregateOutputType | null
    _avg: PassAvgAggregateOutputType | null
    _sum: PassSumAggregateOutputType | null
    _min: PassMinAggregateOutputType | null
    _max: PassMaxAggregateOutputType | null
  }

  export type PassAvgAggregateOutputType = {
    id: number | null
    packageId: number | null
    orderId: number | null
    userId: number | null
  }

  export type PassSumAggregateOutputType = {
    id: number | null
    packageId: number | null
    orderId: number | null
    userId: number | null
  }

  export type PassMinAggregateOutputType = {
    id: number | null
    name: string | null
    packageId: number | null
    codePass: string | null
    orderId: number | null
    userId: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PassMaxAggregateOutputType = {
    id: number | null
    name: string | null
    packageId: number | null
    codePass: string | null
    orderId: number | null
    userId: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PassCountAggregateOutputType = {
    id: number
    name: number
    packageId: number
    codePass: number
    orderId: number
    userId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PassAvgAggregateInputType = {
    id?: true
    packageId?: true
    orderId?: true
    userId?: true
  }

  export type PassSumAggregateInputType = {
    id?: true
    packageId?: true
    orderId?: true
    userId?: true
  }

  export type PassMinAggregateInputType = {
    id?: true
    name?: true
    packageId?: true
    codePass?: true
    orderId?: true
    userId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PassMaxAggregateInputType = {
    id?: true
    name?: true
    packageId?: true
    codePass?: true
    orderId?: true
    userId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PassCountAggregateInputType = {
    id?: true
    name?: true
    packageId?: true
    codePass?: true
    orderId?: true
    userId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pass to aggregate.
     */
    where?: PassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passes to fetch.
     */
    orderBy?: PassOrderByWithRelationInput | PassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Passes
    **/
    _count?: true | PassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PassMaxAggregateInputType
  }

  export type GetPassAggregateType<T extends PassAggregateArgs> = {
        [P in keyof T & keyof AggregatePass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePass[P]>
      : GetScalarType<T[P], AggregatePass[P]>
  }




  export type PassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassWhereInput
    orderBy?: PassOrderByWithAggregationInput | PassOrderByWithAggregationInput[]
    by: PassScalarFieldEnum[] | PassScalarFieldEnum
    having?: PassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PassCountAggregateInputType | true
    _avg?: PassAvgAggregateInputType
    _sum?: PassSumAggregateInputType
    _min?: PassMinAggregateInputType
    _max?: PassMaxAggregateInputType
  }

  export type PassGroupByOutputType = {
    id: number
    name: string
    packageId: number | null
    codePass: string
    orderId: number
    userId: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: PassCountAggregateOutputType | null
    _avg: PassAvgAggregateOutputType | null
    _sum: PassSumAggregateOutputType | null
    _min: PassMinAggregateOutputType | null
    _max: PassMaxAggregateOutputType | null
  }

  type GetPassGroupByPayload<T extends PassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PassGroupByOutputType[P]>
            : GetScalarType<T[P], PassGroupByOutputType[P]>
        }
      >
    >


  export type PassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    packageId?: boolean
    codePass?: boolean
    orderId?: boolean
    userId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    package?: boolean | Pass$packageArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pass"]>

  export type PassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    packageId?: boolean
    codePass?: boolean
    orderId?: boolean
    userId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    package?: boolean | Pass$packageArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pass"]>

  export type PassSelectScalar = {
    id?: boolean
    name?: boolean
    packageId?: boolean
    codePass?: boolean
    orderId?: boolean
    userId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | Pass$packageArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | Pass$packageArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pass"
    objects: {
      package: Prisma.$PackagePayload<ExtArgs> | null
      order: Prisma.$OrderPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      packageId: number | null
      codePass: string
      orderId: number
      userId: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pass"]>
    composites: {}
  }

  type PassGetPayload<S extends boolean | null | undefined | PassDefaultArgs> = $Result.GetResult<Prisma.$PassPayload, S>

  type PassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PassFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PassCountAggregateInputType | true
    }

  export interface PassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pass'], meta: { name: 'Pass' } }
    /**
     * Find zero or one Pass that matches the filter.
     * @param {PassFindUniqueArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PassFindUniqueArgs>(args: SelectSubset<T, PassFindUniqueArgs<ExtArgs>>): Prisma__PassClient<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pass that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PassFindUniqueOrThrowArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PassFindUniqueOrThrowArgs>(args: SelectSubset<T, PassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PassClient<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassFindFirstArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PassFindFirstArgs>(args?: SelectSubset<T, PassFindFirstArgs<ExtArgs>>): Prisma__PassClient<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassFindFirstOrThrowArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PassFindFirstOrThrowArgs>(args?: SelectSubset<T, PassFindFirstOrThrowArgs<ExtArgs>>): Prisma__PassClient<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Passes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Passes
     * const passes = await prisma.pass.findMany()
     * 
     * // Get first 10 Passes
     * const passes = await prisma.pass.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passWithIdOnly = await prisma.pass.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PassFindManyArgs>(args?: SelectSubset<T, PassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pass.
     * @param {PassCreateArgs} args - Arguments to create a Pass.
     * @example
     * // Create one Pass
     * const Pass = await prisma.pass.create({
     *   data: {
     *     // ... data to create a Pass
     *   }
     * })
     * 
     */
    create<T extends PassCreateArgs>(args: SelectSubset<T, PassCreateArgs<ExtArgs>>): Prisma__PassClient<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Passes.
     * @param {PassCreateManyArgs} args - Arguments to create many Passes.
     * @example
     * // Create many Passes
     * const pass = await prisma.pass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PassCreateManyArgs>(args?: SelectSubset<T, PassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Passes and returns the data saved in the database.
     * @param {PassCreateManyAndReturnArgs} args - Arguments to create many Passes.
     * @example
     * // Create many Passes
     * const pass = await prisma.pass.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Passes and only return the `id`
     * const passWithIdOnly = await prisma.pass.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PassCreateManyAndReturnArgs>(args?: SelectSubset<T, PassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Pass.
     * @param {PassDeleteArgs} args - Arguments to delete one Pass.
     * @example
     * // Delete one Pass
     * const Pass = await prisma.pass.delete({
     *   where: {
     *     // ... filter to delete one Pass
     *   }
     * })
     * 
     */
    delete<T extends PassDeleteArgs>(args: SelectSubset<T, PassDeleteArgs<ExtArgs>>): Prisma__PassClient<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pass.
     * @param {PassUpdateArgs} args - Arguments to update one Pass.
     * @example
     * // Update one Pass
     * const pass = await prisma.pass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PassUpdateArgs>(args: SelectSubset<T, PassUpdateArgs<ExtArgs>>): Prisma__PassClient<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Passes.
     * @param {PassDeleteManyArgs} args - Arguments to filter Passes to delete.
     * @example
     * // Delete a few Passes
     * const { count } = await prisma.pass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PassDeleteManyArgs>(args?: SelectSubset<T, PassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Passes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Passes
     * const pass = await prisma.pass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PassUpdateManyArgs>(args: SelectSubset<T, PassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pass.
     * @param {PassUpsertArgs} args - Arguments to update or create a Pass.
     * @example
     * // Update or create a Pass
     * const pass = await prisma.pass.upsert({
     *   create: {
     *     // ... data to create a Pass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pass we want to update
     *   }
     * })
     */
    upsert<T extends PassUpsertArgs>(args: SelectSubset<T, PassUpsertArgs<ExtArgs>>): Prisma__PassClient<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Passes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassCountArgs} args - Arguments to filter Passes to count.
     * @example
     * // Count the number of Passes
     * const count = await prisma.pass.count({
     *   where: {
     *     // ... the filter for the Passes we want to count
     *   }
     * })
    **/
    count<T extends PassCountArgs>(
      args?: Subset<T, PassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PassAggregateArgs>(args: Subset<T, PassAggregateArgs>): Prisma.PrismaPromise<GetPassAggregateType<T>>

    /**
     * Group by Pass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PassGroupByArgs['orderBy'] }
        : { orderBy?: PassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pass model
   */
  readonly fields: PassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    package<T extends Pass$packageArgs<ExtArgs> = {}>(args?: Subset<T, Pass$packageArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pass model
   */ 
  interface PassFieldRefs {
    readonly id: FieldRef<"Pass", 'Int'>
    readonly name: FieldRef<"Pass", 'String'>
    readonly packageId: FieldRef<"Pass", 'Int'>
    readonly codePass: FieldRef<"Pass", 'String'>
    readonly orderId: FieldRef<"Pass", 'Int'>
    readonly userId: FieldRef<"Pass", 'Int'>
    readonly isActive: FieldRef<"Pass", 'Boolean'>
    readonly createdAt: FieldRef<"Pass", 'DateTime'>
    readonly updatedAt: FieldRef<"Pass", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Pass findUnique
   */
  export type PassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    /**
     * Filter, which Pass to fetch.
     */
    where: PassWhereUniqueInput
  }

  /**
   * Pass findUniqueOrThrow
   */
  export type PassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    /**
     * Filter, which Pass to fetch.
     */
    where: PassWhereUniqueInput
  }

  /**
   * Pass findFirst
   */
  export type PassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    /**
     * Filter, which Pass to fetch.
     */
    where?: PassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passes to fetch.
     */
    orderBy?: PassOrderByWithRelationInput | PassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Passes.
     */
    cursor?: PassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Passes.
     */
    distinct?: PassScalarFieldEnum | PassScalarFieldEnum[]
  }

  /**
   * Pass findFirstOrThrow
   */
  export type PassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    /**
     * Filter, which Pass to fetch.
     */
    where?: PassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passes to fetch.
     */
    orderBy?: PassOrderByWithRelationInput | PassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Passes.
     */
    cursor?: PassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Passes.
     */
    distinct?: PassScalarFieldEnum | PassScalarFieldEnum[]
  }

  /**
   * Pass findMany
   */
  export type PassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    /**
     * Filter, which Passes to fetch.
     */
    where?: PassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Passes to fetch.
     */
    orderBy?: PassOrderByWithRelationInput | PassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Passes.
     */
    cursor?: PassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Passes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Passes.
     */
    skip?: number
    distinct?: PassScalarFieldEnum | PassScalarFieldEnum[]
  }

  /**
   * Pass create
   */
  export type PassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    /**
     * The data needed to create a Pass.
     */
    data: XOR<PassCreateInput, PassUncheckedCreateInput>
  }

  /**
   * Pass createMany
   */
  export type PassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Passes.
     */
    data: PassCreateManyInput | PassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pass createManyAndReturn
   */
  export type PassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Passes.
     */
    data: PassCreateManyInput | PassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pass update
   */
  export type PassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    /**
     * The data needed to update a Pass.
     */
    data: XOR<PassUpdateInput, PassUncheckedUpdateInput>
    /**
     * Choose, which Pass to update.
     */
    where: PassWhereUniqueInput
  }

  /**
   * Pass updateMany
   */
  export type PassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Passes.
     */
    data: XOR<PassUpdateManyMutationInput, PassUncheckedUpdateManyInput>
    /**
     * Filter which Passes to update
     */
    where?: PassWhereInput
  }

  /**
   * Pass upsert
   */
  export type PassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    /**
     * The filter to search for the Pass to update in case it exists.
     */
    where: PassWhereUniqueInput
    /**
     * In case the Pass found by the `where` argument doesn't exist, create a new Pass with this data.
     */
    create: XOR<PassCreateInput, PassUncheckedCreateInput>
    /**
     * In case the Pass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PassUpdateInput, PassUncheckedUpdateInput>
  }

  /**
   * Pass delete
   */
  export type PassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    /**
     * Filter which Pass to delete.
     */
    where: PassWhereUniqueInput
  }

  /**
   * Pass deleteMany
   */
  export type PassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Passes to delete
     */
    where?: PassWhereInput
  }

  /**
   * Pass.package
   */
  export type Pass$packageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
  }

  /**
   * Pass without action
   */
  export type PassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
  }


  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _avg: RegionAvgAggregateOutputType | null
    _sum: RegionSumAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionAvgAggregateOutputType = {
    id: number | null
  }

  export type RegionSumAggregateOutputType = {
    id: number | null
  }

  export type RegionMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    media: string | null
    description: string | null
    name: string | null
    createAt: Date | null
    updatedAt: Date | null
  }

  export type RegionMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    media: string | null
    description: string | null
    name: string | null
    createAt: Date | null
    updatedAt: Date | null
  }

  export type RegionCountAggregateOutputType = {
    id: number
    email: number
    password: number
    media: number
    description: number
    name: number
    createAt: number
    updatedAt: number
    _all: number
  }


  export type RegionAvgAggregateInputType = {
    id?: true
  }

  export type RegionSumAggregateInputType = {
    id?: true
  }

  export type RegionMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    media?: true
    description?: true
    name?: true
    createAt?: true
    updatedAt?: true
  }

  export type RegionMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    media?: true
    description?: true
    name?: true
    createAt?: true
    updatedAt?: true
  }

  export type RegionCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    media?: true
    description?: true
    name?: true
    createAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _avg?: RegionAvgAggregateInputType
    _sum?: RegionSumAggregateInputType
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    id: number
    email: string | null
    password: string | null
    media: string | null
    description: string | null
    name: string
    createAt: Date
    updatedAt: Date
    _count: RegionCountAggregateOutputType | null
    _avg: RegionAvgAggregateOutputType | null
    _sum: RegionSumAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    media?: boolean
    description?: boolean
    name?: boolean
    createAt?: boolean
    updatedAt?: boolean
    sites?: boolean | Region$sitesArgs<ExtArgs>
    packages?: boolean | Region$packagesArgs<ExtArgs>
    categories?: boolean | Region$categoriesArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>

  export type RegionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    media?: boolean
    description?: boolean
    name?: boolean
    createAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["region"]>

  export type RegionSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    media?: boolean
    description?: boolean
    name?: boolean
    createAt?: boolean
    updatedAt?: boolean
  }

  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sites?: boolean | Region$sitesArgs<ExtArgs>
    packages?: boolean | Region$packagesArgs<ExtArgs>
    categories?: boolean | Region$categoriesArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RegionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      sites: Prisma.$SitePayload<ExtArgs>[]
      packages: Prisma.$PackagePayload<ExtArgs>[]
      categories: Prisma.$SiteCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string | null
      password: string | null
      media: string | null
      description: string | null
      name: string
      createAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["region"]>
    composites: {}
  }

  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Region that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
     */
    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Regions.
     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Regions and returns the data saved in the database.
     * @param {RegionCreateManyAndReturnArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Regions and only return the `id`
     * const regionWithIdOnly = await prisma.region.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegionCreateManyAndReturnArgs>(args?: SelectSubset<T, RegionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
     */
    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
     */
    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sites<T extends Region$sitesArgs<ExtArgs> = {}>(args?: Subset<T, Region$sitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findMany"> | Null>
    packages<T extends Region$packagesArgs<ExtArgs> = {}>(args?: Subset<T, Region$packagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany"> | Null>
    categories<T extends Region$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Region$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Region model
   */ 
  interface RegionFieldRefs {
    readonly id: FieldRef<"Region", 'Int'>
    readonly email: FieldRef<"Region", 'String'>
    readonly password: FieldRef<"Region", 'String'>
    readonly media: FieldRef<"Region", 'String'>
    readonly description: FieldRef<"Region", 'String'>
    readonly name: FieldRef<"Region", 'String'>
    readonly createAt: FieldRef<"Region", 'DateTime'>
    readonly updatedAt: FieldRef<"Region", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }

  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region createManyAndReturn
   */
  export type RegionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
  }

  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }

  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
  }

  /**
   * Region.sites
   */
  export type Region$sitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    where?: SiteWhereInput
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    cursor?: SiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Region.packages
   */
  export type Region$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    cursor?: PackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Region.categories
   */
  export type Region$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
    where?: SiteCategoryWhereInput
    orderBy?: SiteCategoryOrderByWithRelationInput | SiteCategoryOrderByWithRelationInput[]
    cursor?: SiteCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SiteCategoryScalarFieldEnum | SiteCategoryScalarFieldEnum[]
  }

  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
  }


  /**
   * Model Site
   */

  export type AggregateSite = {
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  export type SiteAvgAggregateOutputType = {
    id: number | null
    regionId: number | null
    categoryId: number | null
    latitude: Decimal | null
    longitude: Decimal | null
  }

  export type SiteSumAggregateOutputType = {
    id: number | null
    regionId: number | null
    categoryId: number | null
    latitude: Decimal | null
    longitude: Decimal | null
  }

  export type SiteMinAggregateOutputType = {
    id: number | null
    regionId: number | null
    categoryId: number | null
    name: string | null
    description: string | null
    city: string | null
    postalCode: string | null
    address: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    media: string | null
    contact: string | null
    information: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteMaxAggregateOutputType = {
    id: number | null
    regionId: number | null
    categoryId: number | null
    name: string | null
    description: string | null
    city: string | null
    postalCode: string | null
    address: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    media: string | null
    contact: string | null
    information: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteCountAggregateOutputType = {
    id: number
    regionId: number
    categoryId: number
    name: number
    description: number
    city: number
    postalCode: number
    address: number
    latitude: number
    longitude: number
    media: number
    contact: number
    information: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SiteAvgAggregateInputType = {
    id?: true
    regionId?: true
    categoryId?: true
    latitude?: true
    longitude?: true
  }

  export type SiteSumAggregateInputType = {
    id?: true
    regionId?: true
    categoryId?: true
    latitude?: true
    longitude?: true
  }

  export type SiteMinAggregateInputType = {
    id?: true
    regionId?: true
    categoryId?: true
    name?: true
    description?: true
    city?: true
    postalCode?: true
    address?: true
    latitude?: true
    longitude?: true
    media?: true
    contact?: true
    information?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteMaxAggregateInputType = {
    id?: true
    regionId?: true
    categoryId?: true
    name?: true
    description?: true
    city?: true
    postalCode?: true
    address?: true
    latitude?: true
    longitude?: true
    media?: true
    contact?: true
    information?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteCountAggregateInputType = {
    id?: true
    regionId?: true
    categoryId?: true
    name?: true
    description?: true
    city?: true
    postalCode?: true
    address?: true
    latitude?: true
    longitude?: true
    media?: true
    contact?: true
    information?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SiteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Site to aggregate.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sites
    **/
    _count?: true | SiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteMaxAggregateInputType
  }

  export type GetSiteAggregateType<T extends SiteAggregateArgs> = {
        [P in keyof T & keyof AggregateSite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSite[P]>
      : GetScalarType<T[P], AggregateSite[P]>
  }




  export type SiteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
    orderBy?: SiteOrderByWithAggregationInput | SiteOrderByWithAggregationInput[]
    by: SiteScalarFieldEnum[] | SiteScalarFieldEnum
    having?: SiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteCountAggregateInputType | true
    _avg?: SiteAvgAggregateInputType
    _sum?: SiteSumAggregateInputType
    _min?: SiteMinAggregateInputType
    _max?: SiteMaxAggregateInputType
  }

  export type SiteGroupByOutputType = {
    id: number
    regionId: number
    categoryId: number | null
    name: string
    description: string | null
    city: string | null
    postalCode: string | null
    address: string | null
    latitude: Decimal | null
    longitude: Decimal | null
    media: string | null
    contact: string | null
    information: string | null
    createdAt: Date
    updatedAt: Date
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  type GetSiteGroupByPayload<T extends SiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteGroupByOutputType[P]>
            : GetScalarType<T[P], SiteGroupByOutputType[P]>
        }
      >
    >


  export type SiteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    city?: boolean
    postalCode?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    media?: boolean
    contact?: boolean
    information?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
    category?: boolean | Site$categoryArgs<ExtArgs>
    events?: boolean | Site$eventsArgs<ExtArgs>
    siteUsers?: boolean | Site$siteUsersArgs<ExtArgs>
    sitePackage?: boolean | Site$sitePackageArgs<ExtArgs>
    _count?: boolean | SiteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["site"]>

  export type SiteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    city?: boolean
    postalCode?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    media?: boolean
    contact?: boolean
    information?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
    category?: boolean | Site$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["site"]>

  export type SiteSelectScalar = {
    id?: boolean
    regionId?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    city?: boolean
    postalCode?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    media?: boolean
    contact?: boolean
    information?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SiteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
    category?: boolean | Site$categoryArgs<ExtArgs>
    events?: boolean | Site$eventsArgs<ExtArgs>
    siteUsers?: boolean | Site$siteUsersArgs<ExtArgs>
    sitePackage?: boolean | Site$sitePackageArgs<ExtArgs>
    _count?: boolean | SiteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SiteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
    category?: boolean | Site$categoryArgs<ExtArgs>
  }

  export type $SitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Site"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs>
      category: Prisma.$SiteCategoryPayload<ExtArgs> | null
      events: Prisma.$EventPayload<ExtArgs>[]
      siteUsers: Prisma.$SiteUserPayload<ExtArgs>[]
      sitePackage: Prisma.$SitePackagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      regionId: number
      categoryId: number | null
      name: string
      description: string | null
      city: string | null
      postalCode: string | null
      address: string | null
      latitude: Prisma.Decimal | null
      longitude: Prisma.Decimal | null
      media: string | null
      contact: string | null
      information: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["site"]>
    composites: {}
  }

  type SiteGetPayload<S extends boolean | null | undefined | SiteDefaultArgs> = $Result.GetResult<Prisma.$SitePayload, S>

  type SiteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SiteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SiteCountAggregateInputType | true
    }

  export interface SiteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Site'], meta: { name: 'Site' } }
    /**
     * Find zero or one Site that matches the filter.
     * @param {SiteFindUniqueArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SiteFindUniqueArgs>(args: SelectSubset<T, SiteFindUniqueArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Site that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SiteFindUniqueOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SiteFindUniqueOrThrowArgs>(args: SelectSubset<T, SiteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Site that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SiteFindFirstArgs>(args?: SelectSubset<T, SiteFindFirstArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Site that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SiteFindFirstOrThrowArgs>(args?: SelectSubset<T, SiteFindFirstOrThrowArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sites
     * const sites = await prisma.site.findMany()
     * 
     * // Get first 10 Sites
     * const sites = await prisma.site.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteWithIdOnly = await prisma.site.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SiteFindManyArgs>(args?: SelectSubset<T, SiteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Site.
     * @param {SiteCreateArgs} args - Arguments to create a Site.
     * @example
     * // Create one Site
     * const Site = await prisma.site.create({
     *   data: {
     *     // ... data to create a Site
     *   }
     * })
     * 
     */
    create<T extends SiteCreateArgs>(args: SelectSubset<T, SiteCreateArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sites.
     * @param {SiteCreateManyArgs} args - Arguments to create many Sites.
     * @example
     * // Create many Sites
     * const site = await prisma.site.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SiteCreateManyArgs>(args?: SelectSubset<T, SiteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sites and returns the data saved in the database.
     * @param {SiteCreateManyAndReturnArgs} args - Arguments to create many Sites.
     * @example
     * // Create many Sites
     * const site = await prisma.site.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sites and only return the `id`
     * const siteWithIdOnly = await prisma.site.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SiteCreateManyAndReturnArgs>(args?: SelectSubset<T, SiteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Site.
     * @param {SiteDeleteArgs} args - Arguments to delete one Site.
     * @example
     * // Delete one Site
     * const Site = await prisma.site.delete({
     *   where: {
     *     // ... filter to delete one Site
     *   }
     * })
     * 
     */
    delete<T extends SiteDeleteArgs>(args: SelectSubset<T, SiteDeleteArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Site.
     * @param {SiteUpdateArgs} args - Arguments to update one Site.
     * @example
     * // Update one Site
     * const site = await prisma.site.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SiteUpdateArgs>(args: SelectSubset<T, SiteUpdateArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sites.
     * @param {SiteDeleteManyArgs} args - Arguments to filter Sites to delete.
     * @example
     * // Delete a few Sites
     * const { count } = await prisma.site.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SiteDeleteManyArgs>(args?: SelectSubset<T, SiteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sites
     * const site = await prisma.site.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SiteUpdateManyArgs>(args: SelectSubset<T, SiteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Site.
     * @param {SiteUpsertArgs} args - Arguments to update or create a Site.
     * @example
     * // Update or create a Site
     * const site = await prisma.site.upsert({
     *   create: {
     *     // ... data to create a Site
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Site we want to update
     *   }
     * })
     */
    upsert<T extends SiteUpsertArgs>(args: SelectSubset<T, SiteUpsertArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCountArgs} args - Arguments to filter Sites to count.
     * @example
     * // Count the number of Sites
     * const count = await prisma.site.count({
     *   where: {
     *     // ... the filter for the Sites we want to count
     *   }
     * })
    **/
    count<T extends SiteCountArgs>(
      args?: Subset<T, SiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteAggregateArgs>(args: Subset<T, SiteAggregateArgs>): Prisma.PrismaPromise<GetSiteAggregateType<T>>

    /**
     * Group by Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteGroupByArgs['orderBy'] }
        : { orderBy?: SiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Site model
   */
  readonly fields: SiteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Site.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SiteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends Site$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Site$categoryArgs<ExtArgs>>): Prisma__SiteCategoryClient<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    events<T extends Site$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Site$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    siteUsers<T extends Site$siteUsersArgs<ExtArgs> = {}>(args?: Subset<T, Site$siteUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteUserPayload<ExtArgs>, T, "findMany"> | Null>
    sitePackage<T extends Site$sitePackageArgs<ExtArgs> = {}>(args?: Subset<T, Site$sitePackageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Site model
   */ 
  interface SiteFieldRefs {
    readonly id: FieldRef<"Site", 'Int'>
    readonly regionId: FieldRef<"Site", 'Int'>
    readonly categoryId: FieldRef<"Site", 'Int'>
    readonly name: FieldRef<"Site", 'String'>
    readonly description: FieldRef<"Site", 'String'>
    readonly city: FieldRef<"Site", 'String'>
    readonly postalCode: FieldRef<"Site", 'String'>
    readonly address: FieldRef<"Site", 'String'>
    readonly latitude: FieldRef<"Site", 'Decimal'>
    readonly longitude: FieldRef<"Site", 'Decimal'>
    readonly media: FieldRef<"Site", 'String'>
    readonly contact: FieldRef<"Site", 'String'>
    readonly information: FieldRef<"Site", 'String'>
    readonly createdAt: FieldRef<"Site", 'DateTime'>
    readonly updatedAt: FieldRef<"Site", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Site findUnique
   */
  export type SiteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findUniqueOrThrow
   */
  export type SiteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findFirst
   */
  export type SiteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site findFirstOrThrow
   */
  export type SiteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site findMany
   */
  export type SiteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Sites to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site create
   */
  export type SiteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to create a Site.
     */
    data: XOR<SiteCreateInput, SiteUncheckedCreateInput>
  }

  /**
   * Site createMany
   */
  export type SiteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sites.
     */
    data: SiteCreateManyInput | SiteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Site createManyAndReturn
   */
  export type SiteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sites.
     */
    data: SiteCreateManyInput | SiteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Site update
   */
  export type SiteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to update a Site.
     */
    data: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
    /**
     * Choose, which Site to update.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site updateMany
   */
  export type SiteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sites.
     */
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyInput>
    /**
     * Filter which Sites to update
     */
    where?: SiteWhereInput
  }

  /**
   * Site upsert
   */
  export type SiteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The filter to search for the Site to update in case it exists.
     */
    where: SiteWhereUniqueInput
    /**
     * In case the Site found by the `where` argument doesn't exist, create a new Site with this data.
     */
    create: XOR<SiteCreateInput, SiteUncheckedCreateInput>
    /**
     * In case the Site was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
  }

  /**
   * Site delete
   */
  export type SiteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter which Site to delete.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site deleteMany
   */
  export type SiteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sites to delete
     */
    where?: SiteWhereInput
  }

  /**
   * Site.category
   */
  export type Site$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
    where?: SiteCategoryWhereInput
  }

  /**
   * Site.events
   */
  export type Site$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Site.siteUsers
   */
  export type Site$siteUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserInclude<ExtArgs> | null
    where?: SiteUserWhereInput
    orderBy?: SiteUserOrderByWithRelationInput | SiteUserOrderByWithRelationInput[]
    cursor?: SiteUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SiteUserScalarFieldEnum | SiteUserScalarFieldEnum[]
  }

  /**
   * Site.sitePackage
   */
  export type Site$sitePackageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
    where?: SitePackageWhereInput
    orderBy?: SitePackageOrderByWithRelationInput | SitePackageOrderByWithRelationInput[]
    cursor?: SitePackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SitePackageScalarFieldEnum | SitePackageScalarFieldEnum[]
  }

  /**
   * Site without action
   */
  export type SiteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
  }


  /**
   * Model SiteCategory
   */

  export type AggregateSiteCategory = {
    _count: SiteCategoryCountAggregateOutputType | null
    _avg: SiteCategoryAvgAggregateOutputType | null
    _sum: SiteCategorySumAggregateOutputType | null
    _min: SiteCategoryMinAggregateOutputType | null
    _max: SiteCategoryMaxAggregateOutputType | null
  }

  export type SiteCategoryAvgAggregateOutputType = {
    id: number | null
    regionId: number | null
  }

  export type SiteCategorySumAggregateOutputType = {
    id: number | null
    regionId: number | null
  }

  export type SiteCategoryMinAggregateOutputType = {
    id: number | null
    regionId: number | null
    name: string | null
    media: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SiteCategoryMaxAggregateOutputType = {
    id: number | null
    regionId: number | null
    name: string | null
    media: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SiteCategoryCountAggregateOutputType = {
    id: number
    regionId: number
    name: number
    media: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type SiteCategoryAvgAggregateInputType = {
    id?: true
    regionId?: true
  }

  export type SiteCategorySumAggregateInputType = {
    id?: true
    regionId?: true
  }

  export type SiteCategoryMinAggregateInputType = {
    id?: true
    regionId?: true
    name?: true
    media?: true
    created_at?: true
    updated_at?: true
  }

  export type SiteCategoryMaxAggregateInputType = {
    id?: true
    regionId?: true
    name?: true
    media?: true
    created_at?: true
    updated_at?: true
  }

  export type SiteCategoryCountAggregateInputType = {
    id?: true
    regionId?: true
    name?: true
    media?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type SiteCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteCategory to aggregate.
     */
    where?: SiteCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteCategories to fetch.
     */
    orderBy?: SiteCategoryOrderByWithRelationInput | SiteCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SiteCategories
    **/
    _count?: true | SiteCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteCategoryMaxAggregateInputType
  }

  export type GetSiteCategoryAggregateType<T extends SiteCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSiteCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSiteCategory[P]>
      : GetScalarType<T[P], AggregateSiteCategory[P]>
  }




  export type SiteCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteCategoryWhereInput
    orderBy?: SiteCategoryOrderByWithAggregationInput | SiteCategoryOrderByWithAggregationInput[]
    by: SiteCategoryScalarFieldEnum[] | SiteCategoryScalarFieldEnum
    having?: SiteCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteCategoryCountAggregateInputType | true
    _avg?: SiteCategoryAvgAggregateInputType
    _sum?: SiteCategorySumAggregateInputType
    _min?: SiteCategoryMinAggregateInputType
    _max?: SiteCategoryMaxAggregateInputType
  }

  export type SiteCategoryGroupByOutputType = {
    id: number
    regionId: number
    name: string
    media: string | null
    created_at: Date
    updated_at: Date
    _count: SiteCategoryCountAggregateOutputType | null
    _avg: SiteCategoryAvgAggregateOutputType | null
    _sum: SiteCategorySumAggregateOutputType | null
    _min: SiteCategoryMinAggregateOutputType | null
    _max: SiteCategoryMaxAggregateOutputType | null
  }

  type GetSiteCategoryGroupByPayload<T extends SiteCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SiteCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], SiteCategoryGroupByOutputType[P]>
        }
      >
    >


  export type SiteCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    name?: boolean
    media?: boolean
    created_at?: boolean
    updated_at?: boolean
    sites?: boolean | SiteCategory$sitesArgs<ExtArgs>
    region?: boolean | RegionDefaultArgs<ExtArgs>
    _count?: boolean | SiteCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["siteCategory"]>

  export type SiteCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    name?: boolean
    media?: boolean
    created_at?: boolean
    updated_at?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["siteCategory"]>

  export type SiteCategorySelectScalar = {
    id?: boolean
    regionId?: boolean
    name?: boolean
    media?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type SiteCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sites?: boolean | SiteCategory$sitesArgs<ExtArgs>
    region?: boolean | RegionDefaultArgs<ExtArgs>
    _count?: boolean | SiteCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SiteCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
  }

  export type $SiteCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SiteCategory"
    objects: {
      sites: Prisma.$SitePayload<ExtArgs>[]
      region: Prisma.$RegionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      regionId: number
      name: string
      media: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["siteCategory"]>
    composites: {}
  }

  type SiteCategoryGetPayload<S extends boolean | null | undefined | SiteCategoryDefaultArgs> = $Result.GetResult<Prisma.$SiteCategoryPayload, S>

  type SiteCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SiteCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SiteCategoryCountAggregateInputType | true
    }

  export interface SiteCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SiteCategory'], meta: { name: 'SiteCategory' } }
    /**
     * Find zero or one SiteCategory that matches the filter.
     * @param {SiteCategoryFindUniqueArgs} args - Arguments to find a SiteCategory
     * @example
     * // Get one SiteCategory
     * const siteCategory = await prisma.siteCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SiteCategoryFindUniqueArgs>(args: SelectSubset<T, SiteCategoryFindUniqueArgs<ExtArgs>>): Prisma__SiteCategoryClient<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SiteCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SiteCategoryFindUniqueOrThrowArgs} args - Arguments to find a SiteCategory
     * @example
     * // Get one SiteCategory
     * const siteCategory = await prisma.siteCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SiteCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, SiteCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SiteCategoryClient<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SiteCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCategoryFindFirstArgs} args - Arguments to find a SiteCategory
     * @example
     * // Get one SiteCategory
     * const siteCategory = await prisma.siteCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SiteCategoryFindFirstArgs>(args?: SelectSubset<T, SiteCategoryFindFirstArgs<ExtArgs>>): Prisma__SiteCategoryClient<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SiteCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCategoryFindFirstOrThrowArgs} args - Arguments to find a SiteCategory
     * @example
     * // Get one SiteCategory
     * const siteCategory = await prisma.siteCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SiteCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, SiteCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SiteCategoryClient<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SiteCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SiteCategories
     * const siteCategories = await prisma.siteCategory.findMany()
     * 
     * // Get first 10 SiteCategories
     * const siteCategories = await prisma.siteCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteCategoryWithIdOnly = await prisma.siteCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SiteCategoryFindManyArgs>(args?: SelectSubset<T, SiteCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SiteCategory.
     * @param {SiteCategoryCreateArgs} args - Arguments to create a SiteCategory.
     * @example
     * // Create one SiteCategory
     * const SiteCategory = await prisma.siteCategory.create({
     *   data: {
     *     // ... data to create a SiteCategory
     *   }
     * })
     * 
     */
    create<T extends SiteCategoryCreateArgs>(args: SelectSubset<T, SiteCategoryCreateArgs<ExtArgs>>): Prisma__SiteCategoryClient<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SiteCategories.
     * @param {SiteCategoryCreateManyArgs} args - Arguments to create many SiteCategories.
     * @example
     * // Create many SiteCategories
     * const siteCategory = await prisma.siteCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SiteCategoryCreateManyArgs>(args?: SelectSubset<T, SiteCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SiteCategories and returns the data saved in the database.
     * @param {SiteCategoryCreateManyAndReturnArgs} args - Arguments to create many SiteCategories.
     * @example
     * // Create many SiteCategories
     * const siteCategory = await prisma.siteCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SiteCategories and only return the `id`
     * const siteCategoryWithIdOnly = await prisma.siteCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SiteCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, SiteCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SiteCategory.
     * @param {SiteCategoryDeleteArgs} args - Arguments to delete one SiteCategory.
     * @example
     * // Delete one SiteCategory
     * const SiteCategory = await prisma.siteCategory.delete({
     *   where: {
     *     // ... filter to delete one SiteCategory
     *   }
     * })
     * 
     */
    delete<T extends SiteCategoryDeleteArgs>(args: SelectSubset<T, SiteCategoryDeleteArgs<ExtArgs>>): Prisma__SiteCategoryClient<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SiteCategory.
     * @param {SiteCategoryUpdateArgs} args - Arguments to update one SiteCategory.
     * @example
     * // Update one SiteCategory
     * const siteCategory = await prisma.siteCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SiteCategoryUpdateArgs>(args: SelectSubset<T, SiteCategoryUpdateArgs<ExtArgs>>): Prisma__SiteCategoryClient<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SiteCategories.
     * @param {SiteCategoryDeleteManyArgs} args - Arguments to filter SiteCategories to delete.
     * @example
     * // Delete a few SiteCategories
     * const { count } = await prisma.siteCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SiteCategoryDeleteManyArgs>(args?: SelectSubset<T, SiteCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SiteCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SiteCategories
     * const siteCategory = await prisma.siteCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SiteCategoryUpdateManyArgs>(args: SelectSubset<T, SiteCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SiteCategory.
     * @param {SiteCategoryUpsertArgs} args - Arguments to update or create a SiteCategory.
     * @example
     * // Update or create a SiteCategory
     * const siteCategory = await prisma.siteCategory.upsert({
     *   create: {
     *     // ... data to create a SiteCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SiteCategory we want to update
     *   }
     * })
     */
    upsert<T extends SiteCategoryUpsertArgs>(args: SelectSubset<T, SiteCategoryUpsertArgs<ExtArgs>>): Prisma__SiteCategoryClient<$Result.GetResult<Prisma.$SiteCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SiteCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCategoryCountArgs} args - Arguments to filter SiteCategories to count.
     * @example
     * // Count the number of SiteCategories
     * const count = await prisma.siteCategory.count({
     *   where: {
     *     // ... the filter for the SiteCategories we want to count
     *   }
     * })
    **/
    count<T extends SiteCategoryCountArgs>(
      args?: Subset<T, SiteCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SiteCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteCategoryAggregateArgs>(args: Subset<T, SiteCategoryAggregateArgs>): Prisma.PrismaPromise<GetSiteCategoryAggregateType<T>>

    /**
     * Group by SiteCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteCategoryGroupByArgs['orderBy'] }
        : { orderBy?: SiteCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SiteCategory model
   */
  readonly fields: SiteCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SiteCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SiteCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sites<T extends SiteCategory$sitesArgs<ExtArgs> = {}>(args?: Subset<T, SiteCategory$sitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findMany"> | Null>
    region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SiteCategory model
   */ 
  interface SiteCategoryFieldRefs {
    readonly id: FieldRef<"SiteCategory", 'Int'>
    readonly regionId: FieldRef<"SiteCategory", 'Int'>
    readonly name: FieldRef<"SiteCategory", 'String'>
    readonly media: FieldRef<"SiteCategory", 'String'>
    readonly created_at: FieldRef<"SiteCategory", 'DateTime'>
    readonly updated_at: FieldRef<"SiteCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SiteCategory findUnique
   */
  export type SiteCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SiteCategory to fetch.
     */
    where: SiteCategoryWhereUniqueInput
  }

  /**
   * SiteCategory findUniqueOrThrow
   */
  export type SiteCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SiteCategory to fetch.
     */
    where: SiteCategoryWhereUniqueInput
  }

  /**
   * SiteCategory findFirst
   */
  export type SiteCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SiteCategory to fetch.
     */
    where?: SiteCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteCategories to fetch.
     */
    orderBy?: SiteCategoryOrderByWithRelationInput | SiteCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteCategories.
     */
    cursor?: SiteCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteCategories.
     */
    distinct?: SiteCategoryScalarFieldEnum | SiteCategoryScalarFieldEnum[]
  }

  /**
   * SiteCategory findFirstOrThrow
   */
  export type SiteCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SiteCategory to fetch.
     */
    where?: SiteCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteCategories to fetch.
     */
    orderBy?: SiteCategoryOrderByWithRelationInput | SiteCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteCategories.
     */
    cursor?: SiteCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteCategories.
     */
    distinct?: SiteCategoryScalarFieldEnum | SiteCategoryScalarFieldEnum[]
  }

  /**
   * SiteCategory findMany
   */
  export type SiteCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
    /**
     * Filter, which SiteCategories to fetch.
     */
    where?: SiteCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteCategories to fetch.
     */
    orderBy?: SiteCategoryOrderByWithRelationInput | SiteCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SiteCategories.
     */
    cursor?: SiteCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteCategories.
     */
    skip?: number
    distinct?: SiteCategoryScalarFieldEnum | SiteCategoryScalarFieldEnum[]
  }

  /**
   * SiteCategory create
   */
  export type SiteCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a SiteCategory.
     */
    data: XOR<SiteCategoryCreateInput, SiteCategoryUncheckedCreateInput>
  }

  /**
   * SiteCategory createMany
   */
  export type SiteCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SiteCategories.
     */
    data: SiteCategoryCreateManyInput | SiteCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SiteCategory createManyAndReturn
   */
  export type SiteCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SiteCategories.
     */
    data: SiteCategoryCreateManyInput | SiteCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SiteCategory update
   */
  export type SiteCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a SiteCategory.
     */
    data: XOR<SiteCategoryUpdateInput, SiteCategoryUncheckedUpdateInput>
    /**
     * Choose, which SiteCategory to update.
     */
    where: SiteCategoryWhereUniqueInput
  }

  /**
   * SiteCategory updateMany
   */
  export type SiteCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SiteCategories.
     */
    data: XOR<SiteCategoryUpdateManyMutationInput, SiteCategoryUncheckedUpdateManyInput>
    /**
     * Filter which SiteCategories to update
     */
    where?: SiteCategoryWhereInput
  }

  /**
   * SiteCategory upsert
   */
  export type SiteCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the SiteCategory to update in case it exists.
     */
    where: SiteCategoryWhereUniqueInput
    /**
     * In case the SiteCategory found by the `where` argument doesn't exist, create a new SiteCategory with this data.
     */
    create: XOR<SiteCategoryCreateInput, SiteCategoryUncheckedCreateInput>
    /**
     * In case the SiteCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteCategoryUpdateInput, SiteCategoryUncheckedUpdateInput>
  }

  /**
   * SiteCategory delete
   */
  export type SiteCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
    /**
     * Filter which SiteCategory to delete.
     */
    where: SiteCategoryWhereUniqueInput
  }

  /**
   * SiteCategory deleteMany
   */
  export type SiteCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteCategories to delete
     */
    where?: SiteCategoryWhereInput
  }

  /**
   * SiteCategory.sites
   */
  export type SiteCategory$sitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    where?: SiteWhereInput
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    cursor?: SiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * SiteCategory without action
   */
  export type SiteCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCategory
     */
    select?: SiteCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
    siteId: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
    siteId: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    siteId: number | null
    name: string | null
    description: string | null
    media: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    siteId: number | null
    name: string | null
    description: string | null
    media: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    siteId: number
    name: number
    description: number
    media: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
    siteId?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
    siteId?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    siteId?: true
    name?: true
    description?: true
    media?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    siteId?: true
    name?: true
    description?: true
    media?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    siteId?: true
    name?: true
    description?: true
    media?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    siteId: number
    name: string
    description: string | null
    media: string | null
    startDate: Date
    endDate: Date
    createdAt: Date
    updatedAt: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    siteId?: boolean
    name?: boolean
    description?: boolean
    media?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    siteId?: boolean
    name?: boolean
    description?: boolean
    media?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    siteId?: boolean
    name?: boolean
    description?: boolean
    media?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      site: Prisma.$SitePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      siteId: number
      name: string
      description: string | null
      media: string | null
      startDate: Date
      endDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    site<T extends SiteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SiteDefaultArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'Int'>
    readonly siteId: FieldRef<"Event", 'Int'>
    readonly name: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly media: FieldRef<"Event", 'String'>
    readonly startDate: FieldRef<"Event", 'DateTime'>
    readonly endDate: FieldRef<"Event", 'DateTime'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model SiteUser
   */

  export type AggregateSiteUser = {
    _count: SiteUserCountAggregateOutputType | null
    _avg: SiteUserAvgAggregateOutputType | null
    _sum: SiteUserSumAggregateOutputType | null
    _min: SiteUserMinAggregateOutputType | null
    _max: SiteUserMaxAggregateOutputType | null
  }

  export type SiteUserAvgAggregateOutputType = {
    id: number | null
    siteId: number | null
  }

  export type SiteUserSumAggregateOutputType = {
    id: number | null
    siteId: number | null
  }

  export type SiteUserMinAggregateOutputType = {
    id: number | null
    siteId: number | null
    name: string | null
    email: string | null
    password: string | null
  }

  export type SiteUserMaxAggregateOutputType = {
    id: number | null
    siteId: number | null
    name: string | null
    email: string | null
    password: string | null
  }

  export type SiteUserCountAggregateOutputType = {
    id: number
    siteId: number
    name: number
    email: number
    password: number
    _all: number
  }


  export type SiteUserAvgAggregateInputType = {
    id?: true
    siteId?: true
  }

  export type SiteUserSumAggregateInputType = {
    id?: true
    siteId?: true
  }

  export type SiteUserMinAggregateInputType = {
    id?: true
    siteId?: true
    name?: true
    email?: true
    password?: true
  }

  export type SiteUserMaxAggregateInputType = {
    id?: true
    siteId?: true
    name?: true
    email?: true
    password?: true
  }

  export type SiteUserCountAggregateInputType = {
    id?: true
    siteId?: true
    name?: true
    email?: true
    password?: true
    _all?: true
  }

  export type SiteUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteUser to aggregate.
     */
    where?: SiteUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteUsers to fetch.
     */
    orderBy?: SiteUserOrderByWithRelationInput | SiteUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SiteUsers
    **/
    _count?: true | SiteUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteUserMaxAggregateInputType
  }

  export type GetSiteUserAggregateType<T extends SiteUserAggregateArgs> = {
        [P in keyof T & keyof AggregateSiteUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSiteUser[P]>
      : GetScalarType<T[P], AggregateSiteUser[P]>
  }




  export type SiteUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteUserWhereInput
    orderBy?: SiteUserOrderByWithAggregationInput | SiteUserOrderByWithAggregationInput[]
    by: SiteUserScalarFieldEnum[] | SiteUserScalarFieldEnum
    having?: SiteUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteUserCountAggregateInputType | true
    _avg?: SiteUserAvgAggregateInputType
    _sum?: SiteUserSumAggregateInputType
    _min?: SiteUserMinAggregateInputType
    _max?: SiteUserMaxAggregateInputType
  }

  export type SiteUserGroupByOutputType = {
    id: number
    siteId: number
    name: string
    email: string
    password: string
    _count: SiteUserCountAggregateOutputType | null
    _avg: SiteUserAvgAggregateOutputType | null
    _sum: SiteUserSumAggregateOutputType | null
    _min: SiteUserMinAggregateOutputType | null
    _max: SiteUserMaxAggregateOutputType | null
  }

  type GetSiteUserGroupByPayload<T extends SiteUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SiteUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteUserGroupByOutputType[P]>
            : GetScalarType<T[P], SiteUserGroupByOutputType[P]>
        }
      >
    >


  export type SiteUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    siteId?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["siteUser"]>

  export type SiteUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    siteId?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["siteUser"]>

  export type SiteUserSelectScalar = {
    id?: boolean
    siteId?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
  }

  export type SiteUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }
  export type SiteUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }

  export type $SiteUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SiteUser"
    objects: {
      site: Prisma.$SitePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      siteId: number
      name: string
      email: string
      password: string
    }, ExtArgs["result"]["siteUser"]>
    composites: {}
  }

  type SiteUserGetPayload<S extends boolean | null | undefined | SiteUserDefaultArgs> = $Result.GetResult<Prisma.$SiteUserPayload, S>

  type SiteUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SiteUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SiteUserCountAggregateInputType | true
    }

  export interface SiteUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SiteUser'], meta: { name: 'SiteUser' } }
    /**
     * Find zero or one SiteUser that matches the filter.
     * @param {SiteUserFindUniqueArgs} args - Arguments to find a SiteUser
     * @example
     * // Get one SiteUser
     * const siteUser = await prisma.siteUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SiteUserFindUniqueArgs>(args: SelectSubset<T, SiteUserFindUniqueArgs<ExtArgs>>): Prisma__SiteUserClient<$Result.GetResult<Prisma.$SiteUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SiteUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SiteUserFindUniqueOrThrowArgs} args - Arguments to find a SiteUser
     * @example
     * // Get one SiteUser
     * const siteUser = await prisma.siteUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SiteUserFindUniqueOrThrowArgs>(args: SelectSubset<T, SiteUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SiteUserClient<$Result.GetResult<Prisma.$SiteUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SiteUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUserFindFirstArgs} args - Arguments to find a SiteUser
     * @example
     * // Get one SiteUser
     * const siteUser = await prisma.siteUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SiteUserFindFirstArgs>(args?: SelectSubset<T, SiteUserFindFirstArgs<ExtArgs>>): Prisma__SiteUserClient<$Result.GetResult<Prisma.$SiteUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SiteUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUserFindFirstOrThrowArgs} args - Arguments to find a SiteUser
     * @example
     * // Get one SiteUser
     * const siteUser = await prisma.siteUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SiteUserFindFirstOrThrowArgs>(args?: SelectSubset<T, SiteUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__SiteUserClient<$Result.GetResult<Prisma.$SiteUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SiteUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SiteUsers
     * const siteUsers = await prisma.siteUser.findMany()
     * 
     * // Get first 10 SiteUsers
     * const siteUsers = await prisma.siteUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteUserWithIdOnly = await prisma.siteUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SiteUserFindManyArgs>(args?: SelectSubset<T, SiteUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SiteUser.
     * @param {SiteUserCreateArgs} args - Arguments to create a SiteUser.
     * @example
     * // Create one SiteUser
     * const SiteUser = await prisma.siteUser.create({
     *   data: {
     *     // ... data to create a SiteUser
     *   }
     * })
     * 
     */
    create<T extends SiteUserCreateArgs>(args: SelectSubset<T, SiteUserCreateArgs<ExtArgs>>): Prisma__SiteUserClient<$Result.GetResult<Prisma.$SiteUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SiteUsers.
     * @param {SiteUserCreateManyArgs} args - Arguments to create many SiteUsers.
     * @example
     * // Create many SiteUsers
     * const siteUser = await prisma.siteUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SiteUserCreateManyArgs>(args?: SelectSubset<T, SiteUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SiteUsers and returns the data saved in the database.
     * @param {SiteUserCreateManyAndReturnArgs} args - Arguments to create many SiteUsers.
     * @example
     * // Create many SiteUsers
     * const siteUser = await prisma.siteUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SiteUsers and only return the `id`
     * const siteUserWithIdOnly = await prisma.siteUser.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SiteUserCreateManyAndReturnArgs>(args?: SelectSubset<T, SiteUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SiteUserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SiteUser.
     * @param {SiteUserDeleteArgs} args - Arguments to delete one SiteUser.
     * @example
     * // Delete one SiteUser
     * const SiteUser = await prisma.siteUser.delete({
     *   where: {
     *     // ... filter to delete one SiteUser
     *   }
     * })
     * 
     */
    delete<T extends SiteUserDeleteArgs>(args: SelectSubset<T, SiteUserDeleteArgs<ExtArgs>>): Prisma__SiteUserClient<$Result.GetResult<Prisma.$SiteUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SiteUser.
     * @param {SiteUserUpdateArgs} args - Arguments to update one SiteUser.
     * @example
     * // Update one SiteUser
     * const siteUser = await prisma.siteUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SiteUserUpdateArgs>(args: SelectSubset<T, SiteUserUpdateArgs<ExtArgs>>): Prisma__SiteUserClient<$Result.GetResult<Prisma.$SiteUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SiteUsers.
     * @param {SiteUserDeleteManyArgs} args - Arguments to filter SiteUsers to delete.
     * @example
     * // Delete a few SiteUsers
     * const { count } = await prisma.siteUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SiteUserDeleteManyArgs>(args?: SelectSubset<T, SiteUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SiteUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SiteUsers
     * const siteUser = await prisma.siteUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SiteUserUpdateManyArgs>(args: SelectSubset<T, SiteUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SiteUser.
     * @param {SiteUserUpsertArgs} args - Arguments to update or create a SiteUser.
     * @example
     * // Update or create a SiteUser
     * const siteUser = await prisma.siteUser.upsert({
     *   create: {
     *     // ... data to create a SiteUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SiteUser we want to update
     *   }
     * })
     */
    upsert<T extends SiteUserUpsertArgs>(args: SelectSubset<T, SiteUserUpsertArgs<ExtArgs>>): Prisma__SiteUserClient<$Result.GetResult<Prisma.$SiteUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SiteUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUserCountArgs} args - Arguments to filter SiteUsers to count.
     * @example
     * // Count the number of SiteUsers
     * const count = await prisma.siteUser.count({
     *   where: {
     *     // ... the filter for the SiteUsers we want to count
     *   }
     * })
    **/
    count<T extends SiteUserCountArgs>(
      args?: Subset<T, SiteUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SiteUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteUserAggregateArgs>(args: Subset<T, SiteUserAggregateArgs>): Prisma.PrismaPromise<GetSiteUserAggregateType<T>>

    /**
     * Group by SiteUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteUserGroupByArgs['orderBy'] }
        : { orderBy?: SiteUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SiteUser model
   */
  readonly fields: SiteUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SiteUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SiteUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    site<T extends SiteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SiteDefaultArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SiteUser model
   */ 
  interface SiteUserFieldRefs {
    readonly id: FieldRef<"SiteUser", 'Int'>
    readonly siteId: FieldRef<"SiteUser", 'Int'>
    readonly name: FieldRef<"SiteUser", 'String'>
    readonly email: FieldRef<"SiteUser", 'String'>
    readonly password: FieldRef<"SiteUser", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SiteUser findUnique
   */
  export type SiteUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserInclude<ExtArgs> | null
    /**
     * Filter, which SiteUser to fetch.
     */
    where: SiteUserWhereUniqueInput
  }

  /**
   * SiteUser findUniqueOrThrow
   */
  export type SiteUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserInclude<ExtArgs> | null
    /**
     * Filter, which SiteUser to fetch.
     */
    where: SiteUserWhereUniqueInput
  }

  /**
   * SiteUser findFirst
   */
  export type SiteUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserInclude<ExtArgs> | null
    /**
     * Filter, which SiteUser to fetch.
     */
    where?: SiteUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteUsers to fetch.
     */
    orderBy?: SiteUserOrderByWithRelationInput | SiteUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteUsers.
     */
    cursor?: SiteUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteUsers.
     */
    distinct?: SiteUserScalarFieldEnum | SiteUserScalarFieldEnum[]
  }

  /**
   * SiteUser findFirstOrThrow
   */
  export type SiteUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserInclude<ExtArgs> | null
    /**
     * Filter, which SiteUser to fetch.
     */
    where?: SiteUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteUsers to fetch.
     */
    orderBy?: SiteUserOrderByWithRelationInput | SiteUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteUsers.
     */
    cursor?: SiteUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteUsers.
     */
    distinct?: SiteUserScalarFieldEnum | SiteUserScalarFieldEnum[]
  }

  /**
   * SiteUser findMany
   */
  export type SiteUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserInclude<ExtArgs> | null
    /**
     * Filter, which SiteUsers to fetch.
     */
    where?: SiteUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteUsers to fetch.
     */
    orderBy?: SiteUserOrderByWithRelationInput | SiteUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SiteUsers.
     */
    cursor?: SiteUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteUsers.
     */
    skip?: number
    distinct?: SiteUserScalarFieldEnum | SiteUserScalarFieldEnum[]
  }

  /**
   * SiteUser create
   */
  export type SiteUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserInclude<ExtArgs> | null
    /**
     * The data needed to create a SiteUser.
     */
    data: XOR<SiteUserCreateInput, SiteUserUncheckedCreateInput>
  }

  /**
   * SiteUser createMany
   */
  export type SiteUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SiteUsers.
     */
    data: SiteUserCreateManyInput | SiteUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SiteUser createManyAndReturn
   */
  export type SiteUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SiteUsers.
     */
    data: SiteUserCreateManyInput | SiteUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SiteUser update
   */
  export type SiteUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserInclude<ExtArgs> | null
    /**
     * The data needed to update a SiteUser.
     */
    data: XOR<SiteUserUpdateInput, SiteUserUncheckedUpdateInput>
    /**
     * Choose, which SiteUser to update.
     */
    where: SiteUserWhereUniqueInput
  }

  /**
   * SiteUser updateMany
   */
  export type SiteUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SiteUsers.
     */
    data: XOR<SiteUserUpdateManyMutationInput, SiteUserUncheckedUpdateManyInput>
    /**
     * Filter which SiteUsers to update
     */
    where?: SiteUserWhereInput
  }

  /**
   * SiteUser upsert
   */
  export type SiteUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserInclude<ExtArgs> | null
    /**
     * The filter to search for the SiteUser to update in case it exists.
     */
    where: SiteUserWhereUniqueInput
    /**
     * In case the SiteUser found by the `where` argument doesn't exist, create a new SiteUser with this data.
     */
    create: XOR<SiteUserCreateInput, SiteUserUncheckedCreateInput>
    /**
     * In case the SiteUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteUserUpdateInput, SiteUserUncheckedUpdateInput>
  }

  /**
   * SiteUser delete
   */
  export type SiteUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserInclude<ExtArgs> | null
    /**
     * Filter which SiteUser to delete.
     */
    where: SiteUserWhereUniqueInput
  }

  /**
   * SiteUser deleteMany
   */
  export type SiteUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteUsers to delete
     */
    where?: SiteUserWhereInput
  }

  /**
   * SiteUser without action
   */
  export type SiteUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteUser
     */
    select?: SiteUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteUserInclude<ExtArgs> | null
  }


  /**
   * Model Package
   */

  export type AggregatePackage = {
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  export type PackageAvgAggregateOutputType = {
    id: number | null
    regionId: number | null
    price: Decimal | null
  }

  export type PackageSumAggregateOutputType = {
    id: number | null
    regionId: number | null
    price: Decimal | null
  }

  export type PackageMinAggregateOutputType = {
    id: number | null
    regionId: number | null
    price: Decimal | null
    description: string | null
    name: string | null
    media: string | null
  }

  export type PackageMaxAggregateOutputType = {
    id: number | null
    regionId: number | null
    price: Decimal | null
    description: string | null
    name: string | null
    media: string | null
  }

  export type PackageCountAggregateOutputType = {
    id: number
    regionId: number
    price: number
    description: number
    name: number
    media: number
    _all: number
  }


  export type PackageAvgAggregateInputType = {
    id?: true
    regionId?: true
    price?: true
  }

  export type PackageSumAggregateInputType = {
    id?: true
    regionId?: true
    price?: true
  }

  export type PackageMinAggregateInputType = {
    id?: true
    regionId?: true
    price?: true
    description?: true
    name?: true
    media?: true
  }

  export type PackageMaxAggregateInputType = {
    id?: true
    regionId?: true
    price?: true
    description?: true
    name?: true
    media?: true
  }

  export type PackageCountAggregateInputType = {
    id?: true
    regionId?: true
    price?: true
    description?: true
    name?: true
    media?: true
    _all?: true
  }

  export type PackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Package to aggregate.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Packages
    **/
    _count?: true | PackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageMaxAggregateInputType
  }

  export type GetPackageAggregateType<T extends PackageAggregateArgs> = {
        [P in keyof T & keyof AggregatePackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackage[P]>
      : GetScalarType<T[P], AggregatePackage[P]>
  }




  export type PackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithAggregationInput | PackageOrderByWithAggregationInput[]
    by: PackageScalarFieldEnum[] | PackageScalarFieldEnum
    having?: PackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageCountAggregateInputType | true
    _avg?: PackageAvgAggregateInputType
    _sum?: PackageSumAggregateInputType
    _min?: PackageMinAggregateInputType
    _max?: PackageMaxAggregateInputType
  }

  export type PackageGroupByOutputType = {
    id: number
    regionId: number | null
    price: Decimal
    description: string | null
    name: string
    media: string
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  type GetPackageGroupByPayload<T extends PackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageGroupByOutputType[P]>
            : GetScalarType<T[P], PackageGroupByOutputType[P]>
        }
      >
    >


  export type PackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    price?: boolean
    description?: boolean
    name?: boolean
    media?: boolean
    passes?: boolean | Package$passesArgs<ExtArgs>
    sitePackages?: boolean | Package$sitePackagesArgs<ExtArgs>
    region?: boolean | Package$regionArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    regionId?: boolean
    price?: boolean
    description?: boolean
    name?: boolean
    media?: boolean
    region?: boolean | Package$regionArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectScalar = {
    id?: boolean
    regionId?: boolean
    price?: boolean
    description?: boolean
    name?: boolean
    media?: boolean
  }

  export type PackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passes?: boolean | Package$passesArgs<ExtArgs>
    sitePackages?: boolean | Package$sitePackagesArgs<ExtArgs>
    region?: boolean | Package$regionArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | Package$regionArgs<ExtArgs>
  }

  export type $PackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Package"
    objects: {
      passes: Prisma.$PassPayload<ExtArgs>[]
      sitePackages: Prisma.$SitePackagePayload<ExtArgs>[]
      region: Prisma.$RegionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      regionId: number | null
      price: Prisma.Decimal
      description: string | null
      name: string
      media: string
    }, ExtArgs["result"]["package"]>
    composites: {}
  }

  type PackageGetPayload<S extends boolean | null | undefined | PackageDefaultArgs> = $Result.GetResult<Prisma.$PackagePayload, S>

  type PackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PackageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PackageCountAggregateInputType | true
    }

  export interface PackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Package'], meta: { name: 'Package' } }
    /**
     * Find zero or one Package that matches the filter.
     * @param {PackageFindUniqueArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageFindUniqueArgs>(args: SelectSubset<T, PackageFindUniqueArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Package that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PackageFindUniqueOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Package that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageFindFirstArgs>(args?: SelectSubset<T, PackageFindFirstArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Package that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Packages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Packages
     * const packages = await prisma.package.findMany()
     * 
     * // Get first 10 Packages
     * const packages = await prisma.package.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packageWithIdOnly = await prisma.package.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackageFindManyArgs>(args?: SelectSubset<T, PackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Package.
     * @param {PackageCreateArgs} args - Arguments to create a Package.
     * @example
     * // Create one Package
     * const Package = await prisma.package.create({
     *   data: {
     *     // ... data to create a Package
     *   }
     * })
     * 
     */
    create<T extends PackageCreateArgs>(args: SelectSubset<T, PackageCreateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Packages.
     * @param {PackageCreateManyArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageCreateManyArgs>(args?: SelectSubset<T, PackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Packages and returns the data saved in the database.
     * @param {PackageCreateManyAndReturnArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Packages and only return the `id`
     * const packageWithIdOnly = await prisma.package.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Package.
     * @param {PackageDeleteArgs} args - Arguments to delete one Package.
     * @example
     * // Delete one Package
     * const Package = await prisma.package.delete({
     *   where: {
     *     // ... filter to delete one Package
     *   }
     * })
     * 
     */
    delete<T extends PackageDeleteArgs>(args: SelectSubset<T, PackageDeleteArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Package.
     * @param {PackageUpdateArgs} args - Arguments to update one Package.
     * @example
     * // Update one Package
     * const package = await prisma.package.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageUpdateArgs>(args: SelectSubset<T, PackageUpdateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Packages.
     * @param {PackageDeleteManyArgs} args - Arguments to filter Packages to delete.
     * @example
     * // Delete a few Packages
     * const { count } = await prisma.package.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageDeleteManyArgs>(args?: SelectSubset<T, PackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Packages
     * const package = await prisma.package.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageUpdateManyArgs>(args: SelectSubset<T, PackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Package.
     * @param {PackageUpsertArgs} args - Arguments to update or create a Package.
     * @example
     * // Update or create a Package
     * const package = await prisma.package.upsert({
     *   create: {
     *     // ... data to create a Package
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Package we want to update
     *   }
     * })
     */
    upsert<T extends PackageUpsertArgs>(args: SelectSubset<T, PackageUpsertArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageCountArgs} args - Arguments to filter Packages to count.
     * @example
     * // Count the number of Packages
     * const count = await prisma.package.count({
     *   where: {
     *     // ... the filter for the Packages we want to count
     *   }
     * })
    **/
    count<T extends PackageCountArgs>(
      args?: Subset<T, PackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageAggregateArgs>(args: Subset<T, PackageAggregateArgs>): Prisma.PrismaPromise<GetPackageAggregateType<T>>

    /**
     * Group by Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageGroupByArgs['orderBy'] }
        : { orderBy?: PackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Package model
   */
  readonly fields: PackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Package.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    passes<T extends Package$passesArgs<ExtArgs> = {}>(args?: Subset<T, Package$passesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassPayload<ExtArgs>, T, "findMany"> | Null>
    sitePackages<T extends Package$sitePackagesArgs<ExtArgs> = {}>(args?: Subset<T, Package$sitePackagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "findMany"> | Null>
    region<T extends Package$regionArgs<ExtArgs> = {}>(args?: Subset<T, Package$regionArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Package model
   */ 
  interface PackageFieldRefs {
    readonly id: FieldRef<"Package", 'Int'>
    readonly regionId: FieldRef<"Package", 'Int'>
    readonly price: FieldRef<"Package", 'Decimal'>
    readonly description: FieldRef<"Package", 'String'>
    readonly name: FieldRef<"Package", 'String'>
    readonly media: FieldRef<"Package", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Package findUnique
   */
  export type PackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findUniqueOrThrow
   */
  export type PackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findFirst
   */
  export type PackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findFirstOrThrow
   */
  export type PackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findMany
   */
  export type PackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Packages to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package create
   */
  export type PackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to create a Package.
     */
    data: XOR<PackageCreateInput, PackageUncheckedCreateInput>
  }

  /**
   * Package createMany
   */
  export type PackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Package createManyAndReturn
   */
  export type PackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Package update
   */
  export type PackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to update a Package.
     */
    data: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
    /**
     * Choose, which Package to update.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package updateMany
   */
  export type PackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Packages.
     */
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyInput>
    /**
     * Filter which Packages to update
     */
    where?: PackageWhereInput
  }

  /**
   * Package upsert
   */
  export type PackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The filter to search for the Package to update in case it exists.
     */
    where: PackageWhereUniqueInput
    /**
     * In case the Package found by the `where` argument doesn't exist, create a new Package with this data.
     */
    create: XOR<PackageCreateInput, PackageUncheckedCreateInput>
    /**
     * In case the Package was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
  }

  /**
   * Package delete
   */
  export type PackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter which Package to delete.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package deleteMany
   */
  export type PackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Packages to delete
     */
    where?: PackageWhereInput
  }

  /**
   * Package.passes
   */
  export type Package$passesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pass
     */
    select?: PassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassInclude<ExtArgs> | null
    where?: PassWhereInput
    orderBy?: PassOrderByWithRelationInput | PassOrderByWithRelationInput[]
    cursor?: PassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PassScalarFieldEnum | PassScalarFieldEnum[]
  }

  /**
   * Package.sitePackages
   */
  export type Package$sitePackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
    where?: SitePackageWhereInput
    orderBy?: SitePackageOrderByWithRelationInput | SitePackageOrderByWithRelationInput[]
    cursor?: SitePackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SitePackageScalarFieldEnum | SitePackageScalarFieldEnum[]
  }

  /**
   * Package.region
   */
  export type Package$regionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    where?: RegionWhereInput
  }

  /**
   * Package without action
   */
  export type PackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
  }


  /**
   * Model SitePackage
   */

  export type AggregateSitePackage = {
    _count: SitePackageCountAggregateOutputType | null
    _avg: SitePackageAvgAggregateOutputType | null
    _sum: SitePackageSumAggregateOutputType | null
    _min: SitePackageMinAggregateOutputType | null
    _max: SitePackageMaxAggregateOutputType | null
  }

  export type SitePackageAvgAggregateOutputType = {
    siteId: number | null
    packageId: number | null
  }

  export type SitePackageSumAggregateOutputType = {
    siteId: number | null
    packageId: number | null
  }

  export type SitePackageMinAggregateOutputType = {
    siteId: number | null
    packageId: number | null
  }

  export type SitePackageMaxAggregateOutputType = {
    siteId: number | null
    packageId: number | null
  }

  export type SitePackageCountAggregateOutputType = {
    siteId: number
    packageId: number
    _all: number
  }


  export type SitePackageAvgAggregateInputType = {
    siteId?: true
    packageId?: true
  }

  export type SitePackageSumAggregateInputType = {
    siteId?: true
    packageId?: true
  }

  export type SitePackageMinAggregateInputType = {
    siteId?: true
    packageId?: true
  }

  export type SitePackageMaxAggregateInputType = {
    siteId?: true
    packageId?: true
  }

  export type SitePackageCountAggregateInputType = {
    siteId?: true
    packageId?: true
    _all?: true
  }

  export type SitePackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SitePackage to aggregate.
     */
    where?: SitePackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SitePackages to fetch.
     */
    orderBy?: SitePackageOrderByWithRelationInput | SitePackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SitePackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SitePackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SitePackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SitePackages
    **/
    _count?: true | SitePackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SitePackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SitePackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SitePackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SitePackageMaxAggregateInputType
  }

  export type GetSitePackageAggregateType<T extends SitePackageAggregateArgs> = {
        [P in keyof T & keyof AggregateSitePackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSitePackage[P]>
      : GetScalarType<T[P], AggregateSitePackage[P]>
  }




  export type SitePackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SitePackageWhereInput
    orderBy?: SitePackageOrderByWithAggregationInput | SitePackageOrderByWithAggregationInput[]
    by: SitePackageScalarFieldEnum[] | SitePackageScalarFieldEnum
    having?: SitePackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SitePackageCountAggregateInputType | true
    _avg?: SitePackageAvgAggregateInputType
    _sum?: SitePackageSumAggregateInputType
    _min?: SitePackageMinAggregateInputType
    _max?: SitePackageMaxAggregateInputType
  }

  export type SitePackageGroupByOutputType = {
    siteId: number
    packageId: number
    _count: SitePackageCountAggregateOutputType | null
    _avg: SitePackageAvgAggregateOutputType | null
    _sum: SitePackageSumAggregateOutputType | null
    _min: SitePackageMinAggregateOutputType | null
    _max: SitePackageMaxAggregateOutputType | null
  }

  type GetSitePackageGroupByPayload<T extends SitePackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SitePackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SitePackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SitePackageGroupByOutputType[P]>
            : GetScalarType<T[P], SitePackageGroupByOutputType[P]>
        }
      >
    >


  export type SitePackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    siteId?: boolean
    packageId?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sitePackage"]>

  export type SitePackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    siteId?: boolean
    packageId?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sitePackage"]>

  export type SitePackageSelectScalar = {
    siteId?: boolean
    packageId?: boolean
  }

  export type SitePackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }
  export type SitePackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }

  export type $SitePackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SitePackage"
    objects: {
      site: Prisma.$SitePayload<ExtArgs>
      package: Prisma.$PackagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      siteId: number
      packageId: number
    }, ExtArgs["result"]["sitePackage"]>
    composites: {}
  }

  type SitePackageGetPayload<S extends boolean | null | undefined | SitePackageDefaultArgs> = $Result.GetResult<Prisma.$SitePackagePayload, S>

  type SitePackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SitePackageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SitePackageCountAggregateInputType | true
    }

  export interface SitePackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SitePackage'], meta: { name: 'SitePackage' } }
    /**
     * Find zero or one SitePackage that matches the filter.
     * @param {SitePackageFindUniqueArgs} args - Arguments to find a SitePackage
     * @example
     * // Get one SitePackage
     * const sitePackage = await prisma.sitePackage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SitePackageFindUniqueArgs>(args: SelectSubset<T, SitePackageFindUniqueArgs<ExtArgs>>): Prisma__SitePackageClient<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SitePackage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SitePackageFindUniqueOrThrowArgs} args - Arguments to find a SitePackage
     * @example
     * // Get one SitePackage
     * const sitePackage = await prisma.sitePackage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SitePackageFindUniqueOrThrowArgs>(args: SelectSubset<T, SitePackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SitePackageClient<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SitePackage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitePackageFindFirstArgs} args - Arguments to find a SitePackage
     * @example
     * // Get one SitePackage
     * const sitePackage = await prisma.sitePackage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SitePackageFindFirstArgs>(args?: SelectSubset<T, SitePackageFindFirstArgs<ExtArgs>>): Prisma__SitePackageClient<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SitePackage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitePackageFindFirstOrThrowArgs} args - Arguments to find a SitePackage
     * @example
     * // Get one SitePackage
     * const sitePackage = await prisma.sitePackage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SitePackageFindFirstOrThrowArgs>(args?: SelectSubset<T, SitePackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__SitePackageClient<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SitePackages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitePackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SitePackages
     * const sitePackages = await prisma.sitePackage.findMany()
     * 
     * // Get first 10 SitePackages
     * const sitePackages = await prisma.sitePackage.findMany({ take: 10 })
     * 
     * // Only select the `siteId`
     * const sitePackageWithSiteIdOnly = await prisma.sitePackage.findMany({ select: { siteId: true } })
     * 
     */
    findMany<T extends SitePackageFindManyArgs>(args?: SelectSubset<T, SitePackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SitePackage.
     * @param {SitePackageCreateArgs} args - Arguments to create a SitePackage.
     * @example
     * // Create one SitePackage
     * const SitePackage = await prisma.sitePackage.create({
     *   data: {
     *     // ... data to create a SitePackage
     *   }
     * })
     * 
     */
    create<T extends SitePackageCreateArgs>(args: SelectSubset<T, SitePackageCreateArgs<ExtArgs>>): Prisma__SitePackageClient<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SitePackages.
     * @param {SitePackageCreateManyArgs} args - Arguments to create many SitePackages.
     * @example
     * // Create many SitePackages
     * const sitePackage = await prisma.sitePackage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SitePackageCreateManyArgs>(args?: SelectSubset<T, SitePackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SitePackages and returns the data saved in the database.
     * @param {SitePackageCreateManyAndReturnArgs} args - Arguments to create many SitePackages.
     * @example
     * // Create many SitePackages
     * const sitePackage = await prisma.sitePackage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SitePackages and only return the `siteId`
     * const sitePackageWithSiteIdOnly = await prisma.sitePackage.createManyAndReturn({ 
     *   select: { siteId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SitePackageCreateManyAndReturnArgs>(args?: SelectSubset<T, SitePackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SitePackage.
     * @param {SitePackageDeleteArgs} args - Arguments to delete one SitePackage.
     * @example
     * // Delete one SitePackage
     * const SitePackage = await prisma.sitePackage.delete({
     *   where: {
     *     // ... filter to delete one SitePackage
     *   }
     * })
     * 
     */
    delete<T extends SitePackageDeleteArgs>(args: SelectSubset<T, SitePackageDeleteArgs<ExtArgs>>): Prisma__SitePackageClient<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SitePackage.
     * @param {SitePackageUpdateArgs} args - Arguments to update one SitePackage.
     * @example
     * // Update one SitePackage
     * const sitePackage = await prisma.sitePackage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SitePackageUpdateArgs>(args: SelectSubset<T, SitePackageUpdateArgs<ExtArgs>>): Prisma__SitePackageClient<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SitePackages.
     * @param {SitePackageDeleteManyArgs} args - Arguments to filter SitePackages to delete.
     * @example
     * // Delete a few SitePackages
     * const { count } = await prisma.sitePackage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SitePackageDeleteManyArgs>(args?: SelectSubset<T, SitePackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SitePackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitePackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SitePackages
     * const sitePackage = await prisma.sitePackage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SitePackageUpdateManyArgs>(args: SelectSubset<T, SitePackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SitePackage.
     * @param {SitePackageUpsertArgs} args - Arguments to update or create a SitePackage.
     * @example
     * // Update or create a SitePackage
     * const sitePackage = await prisma.sitePackage.upsert({
     *   create: {
     *     // ... data to create a SitePackage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SitePackage we want to update
     *   }
     * })
     */
    upsert<T extends SitePackageUpsertArgs>(args: SelectSubset<T, SitePackageUpsertArgs<ExtArgs>>): Prisma__SitePackageClient<$Result.GetResult<Prisma.$SitePackagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SitePackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitePackageCountArgs} args - Arguments to filter SitePackages to count.
     * @example
     * // Count the number of SitePackages
     * const count = await prisma.sitePackage.count({
     *   where: {
     *     // ... the filter for the SitePackages we want to count
     *   }
     * })
    **/
    count<T extends SitePackageCountArgs>(
      args?: Subset<T, SitePackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SitePackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SitePackage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitePackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SitePackageAggregateArgs>(args: Subset<T, SitePackageAggregateArgs>): Prisma.PrismaPromise<GetSitePackageAggregateType<T>>

    /**
     * Group by SitePackage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SitePackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SitePackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SitePackageGroupByArgs['orderBy'] }
        : { orderBy?: SitePackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SitePackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSitePackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SitePackage model
   */
  readonly fields: SitePackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SitePackage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SitePackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    site<T extends SiteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SiteDefaultArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    package<T extends PackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackageDefaultArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SitePackage model
   */ 
  interface SitePackageFieldRefs {
    readonly siteId: FieldRef<"SitePackage", 'Int'>
    readonly packageId: FieldRef<"SitePackage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SitePackage findUnique
   */
  export type SitePackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
    /**
     * Filter, which SitePackage to fetch.
     */
    where: SitePackageWhereUniqueInput
  }

  /**
   * SitePackage findUniqueOrThrow
   */
  export type SitePackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
    /**
     * Filter, which SitePackage to fetch.
     */
    where: SitePackageWhereUniqueInput
  }

  /**
   * SitePackage findFirst
   */
  export type SitePackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
    /**
     * Filter, which SitePackage to fetch.
     */
    where?: SitePackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SitePackages to fetch.
     */
    orderBy?: SitePackageOrderByWithRelationInput | SitePackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SitePackages.
     */
    cursor?: SitePackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SitePackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SitePackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SitePackages.
     */
    distinct?: SitePackageScalarFieldEnum | SitePackageScalarFieldEnum[]
  }

  /**
   * SitePackage findFirstOrThrow
   */
  export type SitePackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
    /**
     * Filter, which SitePackage to fetch.
     */
    where?: SitePackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SitePackages to fetch.
     */
    orderBy?: SitePackageOrderByWithRelationInput | SitePackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SitePackages.
     */
    cursor?: SitePackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SitePackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SitePackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SitePackages.
     */
    distinct?: SitePackageScalarFieldEnum | SitePackageScalarFieldEnum[]
  }

  /**
   * SitePackage findMany
   */
  export type SitePackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
    /**
     * Filter, which SitePackages to fetch.
     */
    where?: SitePackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SitePackages to fetch.
     */
    orderBy?: SitePackageOrderByWithRelationInput | SitePackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SitePackages.
     */
    cursor?: SitePackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SitePackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SitePackages.
     */
    skip?: number
    distinct?: SitePackageScalarFieldEnum | SitePackageScalarFieldEnum[]
  }

  /**
   * SitePackage create
   */
  export type SitePackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
    /**
     * The data needed to create a SitePackage.
     */
    data: XOR<SitePackageCreateInput, SitePackageUncheckedCreateInput>
  }

  /**
   * SitePackage createMany
   */
  export type SitePackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SitePackages.
     */
    data: SitePackageCreateManyInput | SitePackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SitePackage createManyAndReturn
   */
  export type SitePackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SitePackages.
     */
    data: SitePackageCreateManyInput | SitePackageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SitePackage update
   */
  export type SitePackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
    /**
     * The data needed to update a SitePackage.
     */
    data: XOR<SitePackageUpdateInput, SitePackageUncheckedUpdateInput>
    /**
     * Choose, which SitePackage to update.
     */
    where: SitePackageWhereUniqueInput
  }

  /**
   * SitePackage updateMany
   */
  export type SitePackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SitePackages.
     */
    data: XOR<SitePackageUpdateManyMutationInput, SitePackageUncheckedUpdateManyInput>
    /**
     * Filter which SitePackages to update
     */
    where?: SitePackageWhereInput
  }

  /**
   * SitePackage upsert
   */
  export type SitePackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
    /**
     * The filter to search for the SitePackage to update in case it exists.
     */
    where: SitePackageWhereUniqueInput
    /**
     * In case the SitePackage found by the `where` argument doesn't exist, create a new SitePackage with this data.
     */
    create: XOR<SitePackageCreateInput, SitePackageUncheckedCreateInput>
    /**
     * In case the SitePackage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SitePackageUpdateInput, SitePackageUncheckedUpdateInput>
  }

  /**
   * SitePackage delete
   */
  export type SitePackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
    /**
     * Filter which SitePackage to delete.
     */
    where: SitePackageWhereUniqueInput
  }

  /**
   * SitePackage deleteMany
   */
  export type SitePackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SitePackages to delete
     */
    where?: SitePackageWhereInput
  }

  /**
   * SitePackage without action
   */
  export type SitePackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SitePackage
     */
    select?: SitePackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SitePackageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    createAt: 'createAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    date: 'date',
    amount: 'amount',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const PassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    packageId: 'packageId',
    codePass: 'codePass',
    orderId: 'orderId',
    userId: 'userId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PassScalarFieldEnum = (typeof PassScalarFieldEnum)[keyof typeof PassScalarFieldEnum]


  export const RegionScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    media: 'media',
    description: 'description',
    name: 'name',
    createAt: 'createAt',
    updatedAt: 'updatedAt'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const SiteScalarFieldEnum: {
    id: 'id',
    regionId: 'regionId',
    categoryId: 'categoryId',
    name: 'name',
    description: 'description',
    city: 'city',
    postalCode: 'postalCode',
    address: 'address',
    latitude: 'latitude',
    longitude: 'longitude',
    media: 'media',
    contact: 'contact',
    information: 'information',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SiteScalarFieldEnum = (typeof SiteScalarFieldEnum)[keyof typeof SiteScalarFieldEnum]


  export const SiteCategoryScalarFieldEnum: {
    id: 'id',
    regionId: 'regionId',
    name: 'name',
    media: 'media',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type SiteCategoryScalarFieldEnum = (typeof SiteCategoryScalarFieldEnum)[keyof typeof SiteCategoryScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    siteId: 'siteId',
    name: 'name',
    description: 'description',
    media: 'media',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const SiteUserScalarFieldEnum: {
    id: 'id',
    siteId: 'siteId',
    name: 'name',
    email: 'email',
    password: 'password'
  };

  export type SiteUserScalarFieldEnum = (typeof SiteUserScalarFieldEnum)[keyof typeof SiteUserScalarFieldEnum]


  export const PackageScalarFieldEnum: {
    id: 'id',
    regionId: 'regionId',
    price: 'price',
    description: 'description',
    name: 'name',
    media: 'media'
  };

  export type PackageScalarFieldEnum = (typeof PackageScalarFieldEnum)[keyof typeof PackageScalarFieldEnum]


  export const SitePackageScalarFieldEnum: {
    siteId: 'siteId',
    packageId: 'packageId'
  };

  export type SitePackageScalarFieldEnum = (typeof SitePackageScalarFieldEnum)[keyof typeof SitePackageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    orders?: OrderListRelationFilter
    passes?: PassListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
    passes?: PassOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    orders?: OrderListRelationFilter
    passes?: PassListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
    date?: DateTimeFilter<"Order"> | Date | string
    amount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    passes?: PassListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    passes?: PassOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    date?: DateTimeFilter<"Order"> | Date | string
    amount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    passes?: PassListRelationFilter
  }, "id" | "userId">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    userId?: IntWithAggregatesFilter<"Order"> | number
    date?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    amount?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: StringWithAggregatesFilter<"Order"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type PassWhereInput = {
    AND?: PassWhereInput | PassWhereInput[]
    OR?: PassWhereInput[]
    NOT?: PassWhereInput | PassWhereInput[]
    id?: IntFilter<"Pass"> | number
    name?: StringFilter<"Pass"> | string
    packageId?: IntNullableFilter<"Pass"> | number | null
    codePass?: StringFilter<"Pass"> | string
    orderId?: IntFilter<"Pass"> | number
    userId?: IntFilter<"Pass"> | number
    isActive?: BoolFilter<"Pass"> | boolean
    createdAt?: DateTimeFilter<"Pass"> | Date | string
    updatedAt?: DateTimeFilter<"Pass"> | Date | string
    package?: XOR<PackageNullableRelationFilter, PackageWhereInput> | null
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    packageId?: SortOrderInput | SortOrder
    codePass?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    package?: PackageOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type PassWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PassWhereInput | PassWhereInput[]
    OR?: PassWhereInput[]
    NOT?: PassWhereInput | PassWhereInput[]
    name?: StringFilter<"Pass"> | string
    packageId?: IntNullableFilter<"Pass"> | number | null
    codePass?: StringFilter<"Pass"> | string
    orderId?: IntFilter<"Pass"> | number
    userId?: IntFilter<"Pass"> | number
    isActive?: BoolFilter<"Pass"> | boolean
    createdAt?: DateTimeFilter<"Pass"> | Date | string
    updatedAt?: DateTimeFilter<"Pass"> | Date | string
    package?: XOR<PackageNullableRelationFilter, PackageWhereInput> | null
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    packageId?: SortOrderInput | SortOrder
    codePass?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PassCountOrderByAggregateInput
    _avg?: PassAvgOrderByAggregateInput
    _max?: PassMaxOrderByAggregateInput
    _min?: PassMinOrderByAggregateInput
    _sum?: PassSumOrderByAggregateInput
  }

  export type PassScalarWhereWithAggregatesInput = {
    AND?: PassScalarWhereWithAggregatesInput | PassScalarWhereWithAggregatesInput[]
    OR?: PassScalarWhereWithAggregatesInput[]
    NOT?: PassScalarWhereWithAggregatesInput | PassScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pass"> | number
    name?: StringWithAggregatesFilter<"Pass"> | string
    packageId?: IntNullableWithAggregatesFilter<"Pass"> | number | null
    codePass?: StringWithAggregatesFilter<"Pass"> | string
    orderId?: IntWithAggregatesFilter<"Pass"> | number
    userId?: IntWithAggregatesFilter<"Pass"> | number
    isActive?: BoolWithAggregatesFilter<"Pass"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Pass"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Pass"> | Date | string
  }

  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    id?: IntFilter<"Region"> | number
    email?: StringNullableFilter<"Region"> | string | null
    password?: StringNullableFilter<"Region"> | string | null
    media?: StringNullableFilter<"Region"> | string | null
    description?: StringNullableFilter<"Region"> | string | null
    name?: StringFilter<"Region"> | string
    createAt?: DateTimeFilter<"Region"> | Date | string
    updatedAt?: DateTimeFilter<"Region"> | Date | string
    sites?: SiteListRelationFilter
    packages?: PackageListRelationFilter
    categories?: SiteCategoryListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    media?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    sites?: SiteOrderByRelationAggregateInput
    packages?: PackageOrderByRelationAggregateInput
    categories?: SiteCategoryOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    email?: StringNullableFilter<"Region"> | string | null
    password?: StringNullableFilter<"Region"> | string | null
    media?: StringNullableFilter<"Region"> | string | null
    description?: StringNullableFilter<"Region"> | string | null
    createAt?: DateTimeFilter<"Region"> | Date | string
    updatedAt?: DateTimeFilter<"Region"> | Date | string
    sites?: SiteListRelationFilter
    packages?: PackageListRelationFilter
    categories?: SiteCategoryListRelationFilter
  }, "id" | "name">

  export type RegionOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    media?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _avg?: RegionAvgOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
    _sum?: RegionSumOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Region"> | number
    email?: StringNullableWithAggregatesFilter<"Region"> | string | null
    password?: StringNullableWithAggregatesFilter<"Region"> | string | null
    media?: StringNullableWithAggregatesFilter<"Region"> | string | null
    description?: StringNullableWithAggregatesFilter<"Region"> | string | null
    name?: StringWithAggregatesFilter<"Region"> | string
    createAt?: DateTimeWithAggregatesFilter<"Region"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Region"> | Date | string
  }

  export type SiteWhereInput = {
    AND?: SiteWhereInput | SiteWhereInput[]
    OR?: SiteWhereInput[]
    NOT?: SiteWhereInput | SiteWhereInput[]
    id?: IntFilter<"Site"> | number
    regionId?: IntFilter<"Site"> | number
    categoryId?: IntNullableFilter<"Site"> | number | null
    name?: StringFilter<"Site"> | string
    description?: StringNullableFilter<"Site"> | string | null
    city?: StringNullableFilter<"Site"> | string | null
    postalCode?: StringNullableFilter<"Site"> | string | null
    address?: StringNullableFilter<"Site"> | string | null
    latitude?: DecimalNullableFilter<"Site"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Site"> | Decimal | DecimalJsLike | number | string | null
    media?: StringNullableFilter<"Site"> | string | null
    contact?: StringNullableFilter<"Site"> | string | null
    information?: StringNullableFilter<"Site"> | string | null
    createdAt?: DateTimeFilter<"Site"> | Date | string
    updatedAt?: DateTimeFilter<"Site"> | Date | string
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    category?: XOR<SiteCategoryNullableRelationFilter, SiteCategoryWhereInput> | null
    events?: EventListRelationFilter
    siteUsers?: SiteUserListRelationFilter
    sitePackage?: SitePackageListRelationFilter
  }

  export type SiteOrderByWithRelationInput = {
    id?: SortOrder
    regionId?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    postalCode?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    media?: SortOrderInput | SortOrder
    contact?: SortOrderInput | SortOrder
    information?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: RegionOrderByWithRelationInput
    category?: SiteCategoryOrderByWithRelationInput
    events?: EventOrderByRelationAggregateInput
    siteUsers?: SiteUserOrderByRelationAggregateInput
    sitePackage?: SitePackageOrderByRelationAggregateInput
  }

  export type SiteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: SiteWhereInput | SiteWhereInput[]
    OR?: SiteWhereInput[]
    NOT?: SiteWhereInput | SiteWhereInput[]
    regionId?: IntFilter<"Site"> | number
    categoryId?: IntNullableFilter<"Site"> | number | null
    description?: StringNullableFilter<"Site"> | string | null
    city?: StringNullableFilter<"Site"> | string | null
    postalCode?: StringNullableFilter<"Site"> | string | null
    address?: StringNullableFilter<"Site"> | string | null
    latitude?: DecimalNullableFilter<"Site"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Site"> | Decimal | DecimalJsLike | number | string | null
    media?: StringNullableFilter<"Site"> | string | null
    contact?: StringNullableFilter<"Site"> | string | null
    information?: StringNullableFilter<"Site"> | string | null
    createdAt?: DateTimeFilter<"Site"> | Date | string
    updatedAt?: DateTimeFilter<"Site"> | Date | string
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    category?: XOR<SiteCategoryNullableRelationFilter, SiteCategoryWhereInput> | null
    events?: EventListRelationFilter
    siteUsers?: SiteUserListRelationFilter
    sitePackage?: SitePackageListRelationFilter
  }, "id" | "name">

  export type SiteOrderByWithAggregationInput = {
    id?: SortOrder
    regionId?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    postalCode?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    media?: SortOrderInput | SortOrder
    contact?: SortOrderInput | SortOrder
    information?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SiteCountOrderByAggregateInput
    _avg?: SiteAvgOrderByAggregateInput
    _max?: SiteMaxOrderByAggregateInput
    _min?: SiteMinOrderByAggregateInput
    _sum?: SiteSumOrderByAggregateInput
  }

  export type SiteScalarWhereWithAggregatesInput = {
    AND?: SiteScalarWhereWithAggregatesInput | SiteScalarWhereWithAggregatesInput[]
    OR?: SiteScalarWhereWithAggregatesInput[]
    NOT?: SiteScalarWhereWithAggregatesInput | SiteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Site"> | number
    regionId?: IntWithAggregatesFilter<"Site"> | number
    categoryId?: IntNullableWithAggregatesFilter<"Site"> | number | null
    name?: StringWithAggregatesFilter<"Site"> | string
    description?: StringNullableWithAggregatesFilter<"Site"> | string | null
    city?: StringNullableWithAggregatesFilter<"Site"> | string | null
    postalCode?: StringNullableWithAggregatesFilter<"Site"> | string | null
    address?: StringNullableWithAggregatesFilter<"Site"> | string | null
    latitude?: DecimalNullableWithAggregatesFilter<"Site"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableWithAggregatesFilter<"Site"> | Decimal | DecimalJsLike | number | string | null
    media?: StringNullableWithAggregatesFilter<"Site"> | string | null
    contact?: StringNullableWithAggregatesFilter<"Site"> | string | null
    information?: StringNullableWithAggregatesFilter<"Site"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Site"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Site"> | Date | string
  }

  export type SiteCategoryWhereInput = {
    AND?: SiteCategoryWhereInput | SiteCategoryWhereInput[]
    OR?: SiteCategoryWhereInput[]
    NOT?: SiteCategoryWhereInput | SiteCategoryWhereInput[]
    id?: IntFilter<"SiteCategory"> | number
    regionId?: IntFilter<"SiteCategory"> | number
    name?: StringFilter<"SiteCategory"> | string
    media?: StringNullableFilter<"SiteCategory"> | string | null
    created_at?: DateTimeFilter<"SiteCategory"> | Date | string
    updated_at?: DateTimeFilter<"SiteCategory"> | Date | string
    sites?: SiteListRelationFilter
    region?: XOR<RegionRelationFilter, RegionWhereInput>
  }

  export type SiteCategoryOrderByWithRelationInput = {
    id?: SortOrder
    regionId?: SortOrder
    name?: SortOrder
    media?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    sites?: SiteOrderByRelationAggregateInput
    region?: RegionOrderByWithRelationInput
  }

  export type SiteCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: SiteCategoryWhereInput | SiteCategoryWhereInput[]
    OR?: SiteCategoryWhereInput[]
    NOT?: SiteCategoryWhereInput | SiteCategoryWhereInput[]
    regionId?: IntFilter<"SiteCategory"> | number
    media?: StringNullableFilter<"SiteCategory"> | string | null
    created_at?: DateTimeFilter<"SiteCategory"> | Date | string
    updated_at?: DateTimeFilter<"SiteCategory"> | Date | string
    sites?: SiteListRelationFilter
    region?: XOR<RegionRelationFilter, RegionWhereInput>
  }, "id" | "name">

  export type SiteCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    regionId?: SortOrder
    name?: SortOrder
    media?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: SiteCategoryCountOrderByAggregateInput
    _avg?: SiteCategoryAvgOrderByAggregateInput
    _max?: SiteCategoryMaxOrderByAggregateInput
    _min?: SiteCategoryMinOrderByAggregateInput
    _sum?: SiteCategorySumOrderByAggregateInput
  }

  export type SiteCategoryScalarWhereWithAggregatesInput = {
    AND?: SiteCategoryScalarWhereWithAggregatesInput | SiteCategoryScalarWhereWithAggregatesInput[]
    OR?: SiteCategoryScalarWhereWithAggregatesInput[]
    NOT?: SiteCategoryScalarWhereWithAggregatesInput | SiteCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SiteCategory"> | number
    regionId?: IntWithAggregatesFilter<"SiteCategory"> | number
    name?: StringWithAggregatesFilter<"SiteCategory"> | string
    media?: StringNullableWithAggregatesFilter<"SiteCategory"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"SiteCategory"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"SiteCategory"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: IntFilter<"Event"> | number
    siteId?: IntFilter<"Event"> | number
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    media?: StringNullableFilter<"Event"> | string | null
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    site?: XOR<SiteRelationFilter, SiteWhereInput>
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    siteId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    media?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    site?: SiteOrderByWithRelationInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    siteId?: IntFilter<"Event"> | number
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    media?: StringNullableFilter<"Event"> | string | null
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    site?: XOR<SiteRelationFilter, SiteWhereInput>
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    siteId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    media?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Event"> | number
    siteId?: IntWithAggregatesFilter<"Event"> | number
    name?: StringWithAggregatesFilter<"Event"> | string
    description?: StringNullableWithAggregatesFilter<"Event"> | string | null
    media?: StringNullableWithAggregatesFilter<"Event"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type SiteUserWhereInput = {
    AND?: SiteUserWhereInput | SiteUserWhereInput[]
    OR?: SiteUserWhereInput[]
    NOT?: SiteUserWhereInput | SiteUserWhereInput[]
    id?: IntFilter<"SiteUser"> | number
    siteId?: IntFilter<"SiteUser"> | number
    name?: StringFilter<"SiteUser"> | string
    email?: StringFilter<"SiteUser"> | string
    password?: StringFilter<"SiteUser"> | string
    site?: XOR<SiteRelationFilter, SiteWhereInput>
  }

  export type SiteUserOrderByWithRelationInput = {
    id?: SortOrder
    siteId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    site?: SiteOrderByWithRelationInput
  }

  export type SiteUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    email?: string
    AND?: SiteUserWhereInput | SiteUserWhereInput[]
    OR?: SiteUserWhereInput[]
    NOT?: SiteUserWhereInput | SiteUserWhereInput[]
    siteId?: IntFilter<"SiteUser"> | number
    password?: StringFilter<"SiteUser"> | string
    site?: XOR<SiteRelationFilter, SiteWhereInput>
  }, "id" | "name" | "email">

  export type SiteUserOrderByWithAggregationInput = {
    id?: SortOrder
    siteId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: SiteUserCountOrderByAggregateInput
    _avg?: SiteUserAvgOrderByAggregateInput
    _max?: SiteUserMaxOrderByAggregateInput
    _min?: SiteUserMinOrderByAggregateInput
    _sum?: SiteUserSumOrderByAggregateInput
  }

  export type SiteUserScalarWhereWithAggregatesInput = {
    AND?: SiteUserScalarWhereWithAggregatesInput | SiteUserScalarWhereWithAggregatesInput[]
    OR?: SiteUserScalarWhereWithAggregatesInput[]
    NOT?: SiteUserScalarWhereWithAggregatesInput | SiteUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SiteUser"> | number
    siteId?: IntWithAggregatesFilter<"SiteUser"> | number
    name?: StringWithAggregatesFilter<"SiteUser"> | string
    email?: StringWithAggregatesFilter<"SiteUser"> | string
    password?: StringWithAggregatesFilter<"SiteUser"> | string
  }

  export type PackageWhereInput = {
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    id?: IntFilter<"Package"> | number
    regionId?: IntNullableFilter<"Package"> | number | null
    price?: DecimalFilter<"Package"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"Package"> | string | null
    name?: StringFilter<"Package"> | string
    media?: StringFilter<"Package"> | string
    passes?: PassListRelationFilter
    sitePackages?: SitePackageListRelationFilter
    region?: XOR<RegionNullableRelationFilter, RegionWhereInput> | null
  }

  export type PackageOrderByWithRelationInput = {
    id?: SortOrder
    regionId?: SortOrderInput | SortOrder
    price?: SortOrder
    description?: SortOrderInput | SortOrder
    name?: SortOrder
    media?: SortOrder
    passes?: PassOrderByRelationAggregateInput
    sitePackages?: SitePackageOrderByRelationAggregateInput
    region?: RegionOrderByWithRelationInput
  }

  export type PackageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    regionId?: IntNullableFilter<"Package"> | number | null
    price?: DecimalFilter<"Package"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"Package"> | string | null
    name?: StringFilter<"Package"> | string
    media?: StringFilter<"Package"> | string
    passes?: PassListRelationFilter
    sitePackages?: SitePackageListRelationFilter
    region?: XOR<RegionNullableRelationFilter, RegionWhereInput> | null
  }, "id">

  export type PackageOrderByWithAggregationInput = {
    id?: SortOrder
    regionId?: SortOrderInput | SortOrder
    price?: SortOrder
    description?: SortOrderInput | SortOrder
    name?: SortOrder
    media?: SortOrder
    _count?: PackageCountOrderByAggregateInput
    _avg?: PackageAvgOrderByAggregateInput
    _max?: PackageMaxOrderByAggregateInput
    _min?: PackageMinOrderByAggregateInput
    _sum?: PackageSumOrderByAggregateInput
  }

  export type PackageScalarWhereWithAggregatesInput = {
    AND?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    OR?: PackageScalarWhereWithAggregatesInput[]
    NOT?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Package"> | number
    regionId?: IntNullableWithAggregatesFilter<"Package"> | number | null
    price?: DecimalWithAggregatesFilter<"Package"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableWithAggregatesFilter<"Package"> | string | null
    name?: StringWithAggregatesFilter<"Package"> | string
    media?: StringWithAggregatesFilter<"Package"> | string
  }

  export type SitePackageWhereInput = {
    AND?: SitePackageWhereInput | SitePackageWhereInput[]
    OR?: SitePackageWhereInput[]
    NOT?: SitePackageWhereInput | SitePackageWhereInput[]
    siteId?: IntFilter<"SitePackage"> | number
    packageId?: IntFilter<"SitePackage"> | number
    site?: XOR<SiteRelationFilter, SiteWhereInput>
    package?: XOR<PackageRelationFilter, PackageWhereInput>
  }

  export type SitePackageOrderByWithRelationInput = {
    siteId?: SortOrder
    packageId?: SortOrder
    site?: SiteOrderByWithRelationInput
    package?: PackageOrderByWithRelationInput
  }

  export type SitePackageWhereUniqueInput = Prisma.AtLeast<{
    siteId?: number
    siteId_packageId?: SitePackageSiteIdPackageIdCompoundUniqueInput
    AND?: SitePackageWhereInput | SitePackageWhereInput[]
    OR?: SitePackageWhereInput[]
    NOT?: SitePackageWhereInput | SitePackageWhereInput[]
    packageId?: IntFilter<"SitePackage"> | number
    site?: XOR<SiteRelationFilter, SiteWhereInput>
    package?: XOR<PackageRelationFilter, PackageWhereInput>
  }, "siteId_packageId" | "siteId">

  export type SitePackageOrderByWithAggregationInput = {
    siteId?: SortOrder
    packageId?: SortOrder
    _count?: SitePackageCountOrderByAggregateInput
    _avg?: SitePackageAvgOrderByAggregateInput
    _max?: SitePackageMaxOrderByAggregateInput
    _min?: SitePackageMinOrderByAggregateInput
    _sum?: SitePackageSumOrderByAggregateInput
  }

  export type SitePackageScalarWhereWithAggregatesInput = {
    AND?: SitePackageScalarWhereWithAggregatesInput | SitePackageScalarWhereWithAggregatesInput[]
    OR?: SitePackageScalarWhereWithAggregatesInput[]
    NOT?: SitePackageScalarWhereWithAggregatesInput | SitePackageScalarWhereWithAggregatesInput[]
    siteId?: IntWithAggregatesFilter<"SitePackage"> | number
    packageId?: IntWithAggregatesFilter<"SitePackage"> | number
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    createAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutUserInput
    passes?: PassCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    createAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    passes?: PassUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutUserNestedInput
    passes?: PassUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    passes?: PassUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    createAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    passes?: PassCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    userId: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    passes?: PassUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    passes?: PassUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passes?: PassUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    userId: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassCreateInput = {
    name: string
    codePass: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    package?: PackageCreateNestedOneWithoutPassesInput
    order: OrderCreateNestedOneWithoutPassesInput
    user: UserCreateNestedOneWithoutPassesInput
  }

  export type PassUncheckedCreateInput = {
    id?: number
    name: string
    packageId?: number | null
    codePass: string
    orderId: number
    userId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    codePass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneWithoutPassesNestedInput
    order?: OrderUpdateOneRequiredWithoutPassesNestedInput
    user?: UserUpdateOneRequiredWithoutPassesNestedInput
  }

  export type PassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    packageId?: NullableIntFieldUpdateOperationsInput | number | null
    codePass?: StringFieldUpdateOperationsInput | string
    orderId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassCreateManyInput = {
    id?: number
    name: string
    packageId?: number | null
    codePass: string
    orderId: number
    userId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    codePass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    packageId?: NullableIntFieldUpdateOperationsInput | number | null
    codePass?: StringFieldUpdateOperationsInput | string
    orderId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionCreateInput = {
    email?: string | null
    password?: string | null
    media?: string | null
    description?: string | null
    name: string
    createAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteCreateNestedManyWithoutRegionInput
    packages?: PackageCreateNestedManyWithoutRegionInput
    categories?: SiteCategoryCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    id?: number
    email?: string | null
    password?: string | null
    media?: string | null
    description?: string | null
    name: string
    createAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutRegionInput
    packages?: PackageUncheckedCreateNestedManyWithoutRegionInput
    categories?: SiteCategoryUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUpdateManyWithoutRegionNestedInput
    packages?: PackageUpdateManyWithoutRegionNestedInput
    categories?: SiteCategoryUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutRegionNestedInput
    packages?: PackageUncheckedUpdateManyWithoutRegionNestedInput
    categories?: SiteCategoryUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    id?: number
    email?: string | null
    password?: string | null
    media?: string | null
    description?: string | null
    name: string
    createAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegionUpdateManyMutationInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteCreateInput = {
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutSitesInput
    category?: SiteCategoryCreateNestedOneWithoutSitesInput
    events?: EventCreateNestedManyWithoutSiteInput
    siteUsers?: SiteUserCreateNestedManyWithoutSiteInput
    sitePackage?: SitePackageCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateInput = {
    id?: number
    regionId: number
    categoryId?: number | null
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutSiteInput
    siteUsers?: SiteUserUncheckedCreateNestedManyWithoutSiteInput
    sitePackage?: SitePackageUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutSitesNestedInput
    category?: SiteCategoryUpdateOneWithoutSitesNestedInput
    events?: EventUpdateManyWithoutSiteNestedInput
    siteUsers?: SiteUserUpdateManyWithoutSiteNestedInput
    sitePackage?: SitePackageUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutSiteNestedInput
    siteUsers?: SiteUserUncheckedUpdateManyWithoutSiteNestedInput
    sitePackage?: SitePackageUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteCreateManyInput = {
    id?: number
    regionId: number
    categoryId?: number | null
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteCategoryCreateInput = {
    name: string
    media?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    sites?: SiteCreateNestedManyWithoutCategoryInput
    region: RegionCreateNestedOneWithoutCategoriesInput
  }

  export type SiteCategoryUncheckedCreateInput = {
    id?: number
    regionId: number
    name: string
    media?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type SiteCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    media?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUpdateManyWithoutCategoryNestedInput
    region?: RegionUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type SiteCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    media?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type SiteCategoryCreateManyInput = {
    id?: number
    regionId: number
    name: string
    media?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SiteCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    media?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    media?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    name: string
    description?: string | null
    media?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    site: SiteCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateInput = {
    id?: number
    siteId: number
    name: string
    description?: string | null
    media?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    site?: SiteUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    siteId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateManyInput = {
    id?: number
    siteId: number
    name: string
    description?: string | null
    media?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    siteId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteUserCreateInput = {
    name: string
    email: string
    password: string
    site: SiteCreateNestedOneWithoutSiteUsersInput
  }

  export type SiteUserUncheckedCreateInput = {
    id?: number
    siteId: number
    name: string
    email: string
    password: string
  }

  export type SiteUserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    site?: SiteUpdateOneRequiredWithoutSiteUsersNestedInput
  }

  export type SiteUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    siteId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type SiteUserCreateManyInput = {
    id?: number
    siteId: number
    name: string
    email: string
    password: string
  }

  export type SiteUserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type SiteUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    siteId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type PackageCreateInput = {
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    name: string
    media: string
    passes?: PassCreateNestedManyWithoutPackageInput
    sitePackages?: SitePackageCreateNestedManyWithoutPackageInput
    region?: RegionCreateNestedOneWithoutPackagesInput
  }

  export type PackageUncheckedCreateInput = {
    id?: number
    regionId?: number | null
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    name: string
    media: string
    passes?: PassUncheckedCreateNestedManyWithoutPackageInput
    sitePackages?: SitePackageUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageUpdateInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    media?: StringFieldUpdateOperationsInput | string
    passes?: PassUpdateManyWithoutPackageNestedInput
    sitePackages?: SitePackageUpdateManyWithoutPackageNestedInput
    region?: RegionUpdateOneWithoutPackagesNestedInput
  }

  export type PackageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    media?: StringFieldUpdateOperationsInput | string
    passes?: PassUncheckedUpdateManyWithoutPackageNestedInput
    sitePackages?: SitePackageUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageCreateManyInput = {
    id?: number
    regionId?: number | null
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    name: string
    media: string
  }

  export type PackageUpdateManyMutationInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    media?: StringFieldUpdateOperationsInput | string
  }

  export type PackageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    media?: StringFieldUpdateOperationsInput | string
  }

  export type SitePackageCreateInput = {
    site: SiteCreateNestedOneWithoutSitePackageInput
    package: PackageCreateNestedOneWithoutSitePackagesInput
  }

  export type SitePackageUncheckedCreateInput = {
    siteId: number
    packageId: number
  }

  export type SitePackageUpdateInput = {
    site?: SiteUpdateOneRequiredWithoutSitePackageNestedInput
    package?: PackageUpdateOneRequiredWithoutSitePackagesNestedInput
  }

  export type SitePackageUncheckedUpdateInput = {
    siteId?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
  }

  export type SitePackageCreateManyInput = {
    siteId: number
    packageId: number
  }

  export type SitePackageUpdateManyMutationInput = {

  }

  export type SitePackageUncheckedUpdateManyInput = {
    siteId?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type PassListRelationFilter = {
    every?: PassWhereInput
    some?: PassWhereInput
    none?: PassWhereInput
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PackageNullableRelationFilter = {
    is?: PackageWhereInput | null
    isNot?: PackageWhereInput | null
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    packageId?: SortOrder
    codePass?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassAvgOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
  }

  export type PassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    packageId?: SortOrder
    codePass?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    packageId?: SortOrder
    codePass?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassSumOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SiteListRelationFilter = {
    every?: SiteWhereInput
    some?: SiteWhereInput
    none?: SiteWhereInput
  }

  export type PackageListRelationFilter = {
    every?: PackageWhereInput
    some?: PackageWhereInput
    none?: PackageWhereInput
  }

  export type SiteCategoryListRelationFilter = {
    every?: SiteCategoryWhereInput
    some?: SiteCategoryWhereInput
    none?: SiteCategoryWhereInput
  }

  export type SiteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PackageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SiteCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    media?: SortOrder
    description?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    media?: SortOrder
    description?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    media?: SortOrder
    description?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type RegionRelationFilter = {
    is?: RegionWhereInput
    isNot?: RegionWhereInput
  }

  export type SiteCategoryNullableRelationFilter = {
    is?: SiteCategoryWhereInput | null
    isNot?: SiteCategoryWhereInput | null
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type SiteUserListRelationFilter = {
    every?: SiteUserWhereInput
    some?: SiteUserWhereInput
    none?: SiteUserWhereInput
  }

  export type SitePackageListRelationFilter = {
    every?: SitePackageWhereInput
    some?: SitePackageWhereInput
    none?: SitePackageWhereInput
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SiteUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SitePackageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SiteCountOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    media?: SortOrder
    contact?: SortOrder
    information?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteAvgOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    categoryId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type SiteMaxOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    media?: SortOrder
    contact?: SortOrder
    information?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteMinOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    media?: SortOrder
    contact?: SortOrder
    information?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteSumOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    categoryId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type SiteCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    name?: SortOrder
    media?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SiteCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
  }

  export type SiteCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    name?: SortOrder
    media?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SiteCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    name?: SortOrder
    media?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SiteCategorySumOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
  }

  export type SiteRelationFilter = {
    is?: SiteWhereInput
    isNot?: SiteWhereInput
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    media?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    media?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    media?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
  }

  export type SiteUserCountOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type SiteUserAvgOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
  }

  export type SiteUserMaxOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type SiteUserMinOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type SiteUserSumOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
  }

  export type RegionNullableRelationFilter = {
    is?: RegionWhereInput | null
    isNot?: RegionWhereInput | null
  }

  export type PackageCountOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    price?: SortOrder
    description?: SortOrder
    name?: SortOrder
    media?: SortOrder
  }

  export type PackageAvgOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    price?: SortOrder
  }

  export type PackageMaxOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    price?: SortOrder
    description?: SortOrder
    name?: SortOrder
    media?: SortOrder
  }

  export type PackageMinOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    price?: SortOrder
    description?: SortOrder
    name?: SortOrder
    media?: SortOrder
  }

  export type PackageSumOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    price?: SortOrder
  }

  export type PackageRelationFilter = {
    is?: PackageWhereInput
    isNot?: PackageWhereInput
  }

  export type SitePackageSiteIdPackageIdCompoundUniqueInput = {
    siteId: number
    packageId: number
  }

  export type SitePackageCountOrderByAggregateInput = {
    siteId?: SortOrder
    packageId?: SortOrder
  }

  export type SitePackageAvgOrderByAggregateInput = {
    siteId?: SortOrder
    packageId?: SortOrder
  }

  export type SitePackageMaxOrderByAggregateInput = {
    siteId?: SortOrder
    packageId?: SortOrder
  }

  export type SitePackageMinOrderByAggregateInput = {
    siteId?: SortOrder
    packageId?: SortOrder
  }

  export type SitePackageSumOrderByAggregateInput = {
    siteId?: SortOrder
    packageId?: SortOrder
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type PassCreateNestedManyWithoutUserInput = {
    create?: XOR<PassCreateWithoutUserInput, PassUncheckedCreateWithoutUserInput> | PassCreateWithoutUserInput[] | PassUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PassCreateOrConnectWithoutUserInput | PassCreateOrConnectWithoutUserInput[]
    createMany?: PassCreateManyUserInputEnvelope
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type PassUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PassCreateWithoutUserInput, PassUncheckedCreateWithoutUserInput> | PassCreateWithoutUserInput[] | PassUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PassCreateOrConnectWithoutUserInput | PassCreateOrConnectWithoutUserInput[]
    createMany?: PassCreateManyUserInputEnvelope
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type PassUpdateManyWithoutUserNestedInput = {
    create?: XOR<PassCreateWithoutUserInput, PassUncheckedCreateWithoutUserInput> | PassCreateWithoutUserInput[] | PassUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PassCreateOrConnectWithoutUserInput | PassCreateOrConnectWithoutUserInput[]
    upsert?: PassUpsertWithWhereUniqueWithoutUserInput | PassUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PassCreateManyUserInputEnvelope
    set?: PassWhereUniqueInput | PassWhereUniqueInput[]
    disconnect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    delete?: PassWhereUniqueInput | PassWhereUniqueInput[]
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    update?: PassUpdateWithWhereUniqueWithoutUserInput | PassUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PassUpdateManyWithWhereWithoutUserInput | PassUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PassScalarWhereInput | PassScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type PassUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PassCreateWithoutUserInput, PassUncheckedCreateWithoutUserInput> | PassCreateWithoutUserInput[] | PassUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PassCreateOrConnectWithoutUserInput | PassCreateOrConnectWithoutUserInput[]
    upsert?: PassUpsertWithWhereUniqueWithoutUserInput | PassUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PassCreateManyUserInputEnvelope
    set?: PassWhereUniqueInput | PassWhereUniqueInput[]
    disconnect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    delete?: PassWhereUniqueInput | PassWhereUniqueInput[]
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    update?: PassUpdateWithWhereUniqueWithoutUserInput | PassUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PassUpdateManyWithWhereWithoutUserInput | PassUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PassScalarWhereInput | PassScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type PassCreateNestedManyWithoutOrderInput = {
    create?: XOR<PassCreateWithoutOrderInput, PassUncheckedCreateWithoutOrderInput> | PassCreateWithoutOrderInput[] | PassUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PassCreateOrConnectWithoutOrderInput | PassCreateOrConnectWithoutOrderInput[]
    createMany?: PassCreateManyOrderInputEnvelope
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
  }

  export type PassUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<PassCreateWithoutOrderInput, PassUncheckedCreateWithoutOrderInput> | PassCreateWithoutOrderInput[] | PassUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PassCreateOrConnectWithoutOrderInput | PassCreateOrConnectWithoutOrderInput[]
    createMany?: PassCreateManyOrderInputEnvelope
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type PassUpdateManyWithoutOrderNestedInput = {
    create?: XOR<PassCreateWithoutOrderInput, PassUncheckedCreateWithoutOrderInput> | PassCreateWithoutOrderInput[] | PassUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PassCreateOrConnectWithoutOrderInput | PassCreateOrConnectWithoutOrderInput[]
    upsert?: PassUpsertWithWhereUniqueWithoutOrderInput | PassUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: PassCreateManyOrderInputEnvelope
    set?: PassWhereUniqueInput | PassWhereUniqueInput[]
    disconnect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    delete?: PassWhereUniqueInput | PassWhereUniqueInput[]
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    update?: PassUpdateWithWhereUniqueWithoutOrderInput | PassUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: PassUpdateManyWithWhereWithoutOrderInput | PassUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: PassScalarWhereInput | PassScalarWhereInput[]
  }

  export type PassUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<PassCreateWithoutOrderInput, PassUncheckedCreateWithoutOrderInput> | PassCreateWithoutOrderInput[] | PassUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: PassCreateOrConnectWithoutOrderInput | PassCreateOrConnectWithoutOrderInput[]
    upsert?: PassUpsertWithWhereUniqueWithoutOrderInput | PassUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: PassCreateManyOrderInputEnvelope
    set?: PassWhereUniqueInput | PassWhereUniqueInput[]
    disconnect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    delete?: PassWhereUniqueInput | PassWhereUniqueInput[]
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    update?: PassUpdateWithWhereUniqueWithoutOrderInput | PassUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: PassUpdateManyWithWhereWithoutOrderInput | PassUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: PassScalarWhereInput | PassScalarWhereInput[]
  }

  export type PackageCreateNestedOneWithoutPassesInput = {
    create?: XOR<PackageCreateWithoutPassesInput, PackageUncheckedCreateWithoutPassesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPassesInput
    connect?: PackageWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutPassesInput = {
    create?: XOR<OrderCreateWithoutPassesInput, OrderUncheckedCreateWithoutPassesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPassesInput
    connect?: OrderWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPassesInput = {
    create?: XOR<UserCreateWithoutPassesInput, UserUncheckedCreateWithoutPassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPassesInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PackageUpdateOneWithoutPassesNestedInput = {
    create?: XOR<PackageCreateWithoutPassesInput, PackageUncheckedCreateWithoutPassesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPassesInput
    upsert?: PackageUpsertWithoutPassesInput
    disconnect?: PackageWhereInput | boolean
    delete?: PackageWhereInput | boolean
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutPassesInput, PackageUpdateWithoutPassesInput>, PackageUncheckedUpdateWithoutPassesInput>
  }

  export type OrderUpdateOneRequiredWithoutPassesNestedInput = {
    create?: XOR<OrderCreateWithoutPassesInput, OrderUncheckedCreateWithoutPassesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPassesInput
    upsert?: OrderUpsertWithoutPassesInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutPassesInput, OrderUpdateWithoutPassesInput>, OrderUncheckedUpdateWithoutPassesInput>
  }

  export type UserUpdateOneRequiredWithoutPassesNestedInput = {
    create?: XOR<UserCreateWithoutPassesInput, UserUncheckedCreateWithoutPassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPassesInput
    upsert?: UserUpsertWithoutPassesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPassesInput, UserUpdateWithoutPassesInput>, UserUncheckedUpdateWithoutPassesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SiteCreateNestedManyWithoutRegionInput = {
    create?: XOR<SiteCreateWithoutRegionInput, SiteUncheckedCreateWithoutRegionInput> | SiteCreateWithoutRegionInput[] | SiteUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutRegionInput | SiteCreateOrConnectWithoutRegionInput[]
    createMany?: SiteCreateManyRegionInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type PackageCreateNestedManyWithoutRegionInput = {
    create?: XOR<PackageCreateWithoutRegionInput, PackageUncheckedCreateWithoutRegionInput> | PackageCreateWithoutRegionInput[] | PackageUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutRegionInput | PackageCreateOrConnectWithoutRegionInput[]
    createMany?: PackageCreateManyRegionInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type SiteCategoryCreateNestedManyWithoutRegionInput = {
    create?: XOR<SiteCategoryCreateWithoutRegionInput, SiteCategoryUncheckedCreateWithoutRegionInput> | SiteCategoryCreateWithoutRegionInput[] | SiteCategoryUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: SiteCategoryCreateOrConnectWithoutRegionInput | SiteCategoryCreateOrConnectWithoutRegionInput[]
    createMany?: SiteCategoryCreateManyRegionInputEnvelope
    connect?: SiteCategoryWhereUniqueInput | SiteCategoryWhereUniqueInput[]
  }

  export type SiteUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<SiteCreateWithoutRegionInput, SiteUncheckedCreateWithoutRegionInput> | SiteCreateWithoutRegionInput[] | SiteUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutRegionInput | SiteCreateOrConnectWithoutRegionInput[]
    createMany?: SiteCreateManyRegionInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type PackageUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<PackageCreateWithoutRegionInput, PackageUncheckedCreateWithoutRegionInput> | PackageCreateWithoutRegionInput[] | PackageUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutRegionInput | PackageCreateOrConnectWithoutRegionInput[]
    createMany?: PackageCreateManyRegionInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type SiteCategoryUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<SiteCategoryCreateWithoutRegionInput, SiteCategoryUncheckedCreateWithoutRegionInput> | SiteCategoryCreateWithoutRegionInput[] | SiteCategoryUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: SiteCategoryCreateOrConnectWithoutRegionInput | SiteCategoryCreateOrConnectWithoutRegionInput[]
    createMany?: SiteCategoryCreateManyRegionInputEnvelope
    connect?: SiteCategoryWhereUniqueInput | SiteCategoryWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SiteUpdateManyWithoutRegionNestedInput = {
    create?: XOR<SiteCreateWithoutRegionInput, SiteUncheckedCreateWithoutRegionInput> | SiteCreateWithoutRegionInput[] | SiteUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutRegionInput | SiteCreateOrConnectWithoutRegionInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutRegionInput | SiteUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: SiteCreateManyRegionInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutRegionInput | SiteUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutRegionInput | SiteUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type PackageUpdateManyWithoutRegionNestedInput = {
    create?: XOR<PackageCreateWithoutRegionInput, PackageUncheckedCreateWithoutRegionInput> | PackageCreateWithoutRegionInput[] | PackageUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutRegionInput | PackageCreateOrConnectWithoutRegionInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutRegionInput | PackageUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: PackageCreateManyRegionInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutRegionInput | PackageUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutRegionInput | PackageUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type SiteCategoryUpdateManyWithoutRegionNestedInput = {
    create?: XOR<SiteCategoryCreateWithoutRegionInput, SiteCategoryUncheckedCreateWithoutRegionInput> | SiteCategoryCreateWithoutRegionInput[] | SiteCategoryUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: SiteCategoryCreateOrConnectWithoutRegionInput | SiteCategoryCreateOrConnectWithoutRegionInput[]
    upsert?: SiteCategoryUpsertWithWhereUniqueWithoutRegionInput | SiteCategoryUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: SiteCategoryCreateManyRegionInputEnvelope
    set?: SiteCategoryWhereUniqueInput | SiteCategoryWhereUniqueInput[]
    disconnect?: SiteCategoryWhereUniqueInput | SiteCategoryWhereUniqueInput[]
    delete?: SiteCategoryWhereUniqueInput | SiteCategoryWhereUniqueInput[]
    connect?: SiteCategoryWhereUniqueInput | SiteCategoryWhereUniqueInput[]
    update?: SiteCategoryUpdateWithWhereUniqueWithoutRegionInput | SiteCategoryUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: SiteCategoryUpdateManyWithWhereWithoutRegionInput | SiteCategoryUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: SiteCategoryScalarWhereInput | SiteCategoryScalarWhereInput[]
  }

  export type SiteUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<SiteCreateWithoutRegionInput, SiteUncheckedCreateWithoutRegionInput> | SiteCreateWithoutRegionInput[] | SiteUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutRegionInput | SiteCreateOrConnectWithoutRegionInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutRegionInput | SiteUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: SiteCreateManyRegionInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutRegionInput | SiteUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutRegionInput | SiteUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type PackageUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<PackageCreateWithoutRegionInput, PackageUncheckedCreateWithoutRegionInput> | PackageCreateWithoutRegionInput[] | PackageUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutRegionInput | PackageCreateOrConnectWithoutRegionInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutRegionInput | PackageUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: PackageCreateManyRegionInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutRegionInput | PackageUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutRegionInput | PackageUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type SiteCategoryUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<SiteCategoryCreateWithoutRegionInput, SiteCategoryUncheckedCreateWithoutRegionInput> | SiteCategoryCreateWithoutRegionInput[] | SiteCategoryUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: SiteCategoryCreateOrConnectWithoutRegionInput | SiteCategoryCreateOrConnectWithoutRegionInput[]
    upsert?: SiteCategoryUpsertWithWhereUniqueWithoutRegionInput | SiteCategoryUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: SiteCategoryCreateManyRegionInputEnvelope
    set?: SiteCategoryWhereUniqueInput | SiteCategoryWhereUniqueInput[]
    disconnect?: SiteCategoryWhereUniqueInput | SiteCategoryWhereUniqueInput[]
    delete?: SiteCategoryWhereUniqueInput | SiteCategoryWhereUniqueInput[]
    connect?: SiteCategoryWhereUniqueInput | SiteCategoryWhereUniqueInput[]
    update?: SiteCategoryUpdateWithWhereUniqueWithoutRegionInput | SiteCategoryUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: SiteCategoryUpdateManyWithWhereWithoutRegionInput | SiteCategoryUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: SiteCategoryScalarWhereInput | SiteCategoryScalarWhereInput[]
  }

  export type RegionCreateNestedOneWithoutSitesInput = {
    create?: XOR<RegionCreateWithoutSitesInput, RegionUncheckedCreateWithoutSitesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutSitesInput
    connect?: RegionWhereUniqueInput
  }

  export type SiteCategoryCreateNestedOneWithoutSitesInput = {
    create?: XOR<SiteCategoryCreateWithoutSitesInput, SiteCategoryUncheckedCreateWithoutSitesInput>
    connectOrCreate?: SiteCategoryCreateOrConnectWithoutSitesInput
    connect?: SiteCategoryWhereUniqueInput
  }

  export type EventCreateNestedManyWithoutSiteInput = {
    create?: XOR<EventCreateWithoutSiteInput, EventUncheckedCreateWithoutSiteInput> | EventCreateWithoutSiteInput[] | EventUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: EventCreateOrConnectWithoutSiteInput | EventCreateOrConnectWithoutSiteInput[]
    createMany?: EventCreateManySiteInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type SiteUserCreateNestedManyWithoutSiteInput = {
    create?: XOR<SiteUserCreateWithoutSiteInput, SiteUserUncheckedCreateWithoutSiteInput> | SiteUserCreateWithoutSiteInput[] | SiteUserUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SiteUserCreateOrConnectWithoutSiteInput | SiteUserCreateOrConnectWithoutSiteInput[]
    createMany?: SiteUserCreateManySiteInputEnvelope
    connect?: SiteUserWhereUniqueInput | SiteUserWhereUniqueInput[]
  }

  export type SitePackageCreateNestedManyWithoutSiteInput = {
    create?: XOR<SitePackageCreateWithoutSiteInput, SitePackageUncheckedCreateWithoutSiteInput> | SitePackageCreateWithoutSiteInput[] | SitePackageUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SitePackageCreateOrConnectWithoutSiteInput | SitePackageCreateOrConnectWithoutSiteInput[]
    createMany?: SitePackageCreateManySiteInputEnvelope
    connect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutSiteInput = {
    create?: XOR<EventCreateWithoutSiteInput, EventUncheckedCreateWithoutSiteInput> | EventCreateWithoutSiteInput[] | EventUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: EventCreateOrConnectWithoutSiteInput | EventCreateOrConnectWithoutSiteInput[]
    createMany?: EventCreateManySiteInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type SiteUserUncheckedCreateNestedManyWithoutSiteInput = {
    create?: XOR<SiteUserCreateWithoutSiteInput, SiteUserUncheckedCreateWithoutSiteInput> | SiteUserCreateWithoutSiteInput[] | SiteUserUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SiteUserCreateOrConnectWithoutSiteInput | SiteUserCreateOrConnectWithoutSiteInput[]
    createMany?: SiteUserCreateManySiteInputEnvelope
    connect?: SiteUserWhereUniqueInput | SiteUserWhereUniqueInput[]
  }

  export type SitePackageUncheckedCreateNestedManyWithoutSiteInput = {
    create?: XOR<SitePackageCreateWithoutSiteInput, SitePackageUncheckedCreateWithoutSiteInput> | SitePackageCreateWithoutSiteInput[] | SitePackageUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SitePackageCreateOrConnectWithoutSiteInput | SitePackageCreateOrConnectWithoutSiteInput[]
    createMany?: SitePackageCreateManySiteInputEnvelope
    connect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type RegionUpdateOneRequiredWithoutSitesNestedInput = {
    create?: XOR<RegionCreateWithoutSitesInput, RegionUncheckedCreateWithoutSitesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutSitesInput
    upsert?: RegionUpsertWithoutSitesInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutSitesInput, RegionUpdateWithoutSitesInput>, RegionUncheckedUpdateWithoutSitesInput>
  }

  export type SiteCategoryUpdateOneWithoutSitesNestedInput = {
    create?: XOR<SiteCategoryCreateWithoutSitesInput, SiteCategoryUncheckedCreateWithoutSitesInput>
    connectOrCreate?: SiteCategoryCreateOrConnectWithoutSitesInput
    upsert?: SiteCategoryUpsertWithoutSitesInput
    disconnect?: SiteCategoryWhereInput | boolean
    delete?: SiteCategoryWhereInput | boolean
    connect?: SiteCategoryWhereUniqueInput
    update?: XOR<XOR<SiteCategoryUpdateToOneWithWhereWithoutSitesInput, SiteCategoryUpdateWithoutSitesInput>, SiteCategoryUncheckedUpdateWithoutSitesInput>
  }

  export type EventUpdateManyWithoutSiteNestedInput = {
    create?: XOR<EventCreateWithoutSiteInput, EventUncheckedCreateWithoutSiteInput> | EventCreateWithoutSiteInput[] | EventUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: EventCreateOrConnectWithoutSiteInput | EventCreateOrConnectWithoutSiteInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutSiteInput | EventUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: EventCreateManySiteInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutSiteInput | EventUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: EventUpdateManyWithWhereWithoutSiteInput | EventUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type SiteUserUpdateManyWithoutSiteNestedInput = {
    create?: XOR<SiteUserCreateWithoutSiteInput, SiteUserUncheckedCreateWithoutSiteInput> | SiteUserCreateWithoutSiteInput[] | SiteUserUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SiteUserCreateOrConnectWithoutSiteInput | SiteUserCreateOrConnectWithoutSiteInput[]
    upsert?: SiteUserUpsertWithWhereUniqueWithoutSiteInput | SiteUserUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: SiteUserCreateManySiteInputEnvelope
    set?: SiteUserWhereUniqueInput | SiteUserWhereUniqueInput[]
    disconnect?: SiteUserWhereUniqueInput | SiteUserWhereUniqueInput[]
    delete?: SiteUserWhereUniqueInput | SiteUserWhereUniqueInput[]
    connect?: SiteUserWhereUniqueInput | SiteUserWhereUniqueInput[]
    update?: SiteUserUpdateWithWhereUniqueWithoutSiteInput | SiteUserUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: SiteUserUpdateManyWithWhereWithoutSiteInput | SiteUserUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: SiteUserScalarWhereInput | SiteUserScalarWhereInput[]
  }

  export type SitePackageUpdateManyWithoutSiteNestedInput = {
    create?: XOR<SitePackageCreateWithoutSiteInput, SitePackageUncheckedCreateWithoutSiteInput> | SitePackageCreateWithoutSiteInput[] | SitePackageUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SitePackageCreateOrConnectWithoutSiteInput | SitePackageCreateOrConnectWithoutSiteInput[]
    upsert?: SitePackageUpsertWithWhereUniqueWithoutSiteInput | SitePackageUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: SitePackageCreateManySiteInputEnvelope
    set?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    disconnect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    delete?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    connect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    update?: SitePackageUpdateWithWhereUniqueWithoutSiteInput | SitePackageUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: SitePackageUpdateManyWithWhereWithoutSiteInput | SitePackageUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: SitePackageScalarWhereInput | SitePackageScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutSiteNestedInput = {
    create?: XOR<EventCreateWithoutSiteInput, EventUncheckedCreateWithoutSiteInput> | EventCreateWithoutSiteInput[] | EventUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: EventCreateOrConnectWithoutSiteInput | EventCreateOrConnectWithoutSiteInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutSiteInput | EventUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: EventCreateManySiteInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutSiteInput | EventUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: EventUpdateManyWithWhereWithoutSiteInput | EventUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type SiteUserUncheckedUpdateManyWithoutSiteNestedInput = {
    create?: XOR<SiteUserCreateWithoutSiteInput, SiteUserUncheckedCreateWithoutSiteInput> | SiteUserCreateWithoutSiteInput[] | SiteUserUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SiteUserCreateOrConnectWithoutSiteInput | SiteUserCreateOrConnectWithoutSiteInput[]
    upsert?: SiteUserUpsertWithWhereUniqueWithoutSiteInput | SiteUserUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: SiteUserCreateManySiteInputEnvelope
    set?: SiteUserWhereUniqueInput | SiteUserWhereUniqueInput[]
    disconnect?: SiteUserWhereUniqueInput | SiteUserWhereUniqueInput[]
    delete?: SiteUserWhereUniqueInput | SiteUserWhereUniqueInput[]
    connect?: SiteUserWhereUniqueInput | SiteUserWhereUniqueInput[]
    update?: SiteUserUpdateWithWhereUniqueWithoutSiteInput | SiteUserUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: SiteUserUpdateManyWithWhereWithoutSiteInput | SiteUserUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: SiteUserScalarWhereInput | SiteUserScalarWhereInput[]
  }

  export type SitePackageUncheckedUpdateManyWithoutSiteNestedInput = {
    create?: XOR<SitePackageCreateWithoutSiteInput, SitePackageUncheckedCreateWithoutSiteInput> | SitePackageCreateWithoutSiteInput[] | SitePackageUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: SitePackageCreateOrConnectWithoutSiteInput | SitePackageCreateOrConnectWithoutSiteInput[]
    upsert?: SitePackageUpsertWithWhereUniqueWithoutSiteInput | SitePackageUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: SitePackageCreateManySiteInputEnvelope
    set?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    disconnect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    delete?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    connect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    update?: SitePackageUpdateWithWhereUniqueWithoutSiteInput | SitePackageUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: SitePackageUpdateManyWithWhereWithoutSiteInput | SitePackageUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: SitePackageScalarWhereInput | SitePackageScalarWhereInput[]
  }

  export type SiteCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SiteCreateWithoutCategoryInput, SiteUncheckedCreateWithoutCategoryInput> | SiteCreateWithoutCategoryInput[] | SiteUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCategoryInput | SiteCreateOrConnectWithoutCategoryInput[]
    createMany?: SiteCreateManyCategoryInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type RegionCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<RegionCreateWithoutCategoriesInput, RegionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutCategoriesInput
    connect?: RegionWhereUniqueInput
  }

  export type SiteUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<SiteCreateWithoutCategoryInput, SiteUncheckedCreateWithoutCategoryInput> | SiteCreateWithoutCategoryInput[] | SiteUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCategoryInput | SiteCreateOrConnectWithoutCategoryInput[]
    createMany?: SiteCreateManyCategoryInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type SiteUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SiteCreateWithoutCategoryInput, SiteUncheckedCreateWithoutCategoryInput> | SiteCreateWithoutCategoryInput[] | SiteUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCategoryInput | SiteCreateOrConnectWithoutCategoryInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutCategoryInput | SiteUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SiteCreateManyCategoryInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutCategoryInput | SiteUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutCategoryInput | SiteUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type RegionUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<RegionCreateWithoutCategoriesInput, RegionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutCategoriesInput
    upsert?: RegionUpsertWithoutCategoriesInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutCategoriesInput, RegionUpdateWithoutCategoriesInput>, RegionUncheckedUpdateWithoutCategoriesInput>
  }

  export type SiteUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<SiteCreateWithoutCategoryInput, SiteUncheckedCreateWithoutCategoryInput> | SiteCreateWithoutCategoryInput[] | SiteUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCategoryInput | SiteCreateOrConnectWithoutCategoryInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutCategoryInput | SiteUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: SiteCreateManyCategoryInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutCategoryInput | SiteUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutCategoryInput | SiteUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type SiteCreateNestedOneWithoutEventsInput = {
    create?: XOR<SiteCreateWithoutEventsInput, SiteUncheckedCreateWithoutEventsInput>
    connectOrCreate?: SiteCreateOrConnectWithoutEventsInput
    connect?: SiteWhereUniqueInput
  }

  export type SiteUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<SiteCreateWithoutEventsInput, SiteUncheckedCreateWithoutEventsInput>
    connectOrCreate?: SiteCreateOrConnectWithoutEventsInput
    upsert?: SiteUpsertWithoutEventsInput
    connect?: SiteWhereUniqueInput
    update?: XOR<XOR<SiteUpdateToOneWithWhereWithoutEventsInput, SiteUpdateWithoutEventsInput>, SiteUncheckedUpdateWithoutEventsInput>
  }

  export type SiteCreateNestedOneWithoutSiteUsersInput = {
    create?: XOR<SiteCreateWithoutSiteUsersInput, SiteUncheckedCreateWithoutSiteUsersInput>
    connectOrCreate?: SiteCreateOrConnectWithoutSiteUsersInput
    connect?: SiteWhereUniqueInput
  }

  export type SiteUpdateOneRequiredWithoutSiteUsersNestedInput = {
    create?: XOR<SiteCreateWithoutSiteUsersInput, SiteUncheckedCreateWithoutSiteUsersInput>
    connectOrCreate?: SiteCreateOrConnectWithoutSiteUsersInput
    upsert?: SiteUpsertWithoutSiteUsersInput
    connect?: SiteWhereUniqueInput
    update?: XOR<XOR<SiteUpdateToOneWithWhereWithoutSiteUsersInput, SiteUpdateWithoutSiteUsersInput>, SiteUncheckedUpdateWithoutSiteUsersInput>
  }

  export type PassCreateNestedManyWithoutPackageInput = {
    create?: XOR<PassCreateWithoutPackageInput, PassUncheckedCreateWithoutPackageInput> | PassCreateWithoutPackageInput[] | PassUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PassCreateOrConnectWithoutPackageInput | PassCreateOrConnectWithoutPackageInput[]
    createMany?: PassCreateManyPackageInputEnvelope
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
  }

  export type SitePackageCreateNestedManyWithoutPackageInput = {
    create?: XOR<SitePackageCreateWithoutPackageInput, SitePackageUncheckedCreateWithoutPackageInput> | SitePackageCreateWithoutPackageInput[] | SitePackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: SitePackageCreateOrConnectWithoutPackageInput | SitePackageCreateOrConnectWithoutPackageInput[]
    createMany?: SitePackageCreateManyPackageInputEnvelope
    connect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
  }

  export type RegionCreateNestedOneWithoutPackagesInput = {
    create?: XOR<RegionCreateWithoutPackagesInput, RegionUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutPackagesInput
    connect?: RegionWhereUniqueInput
  }

  export type PassUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<PassCreateWithoutPackageInput, PassUncheckedCreateWithoutPackageInput> | PassCreateWithoutPackageInput[] | PassUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PassCreateOrConnectWithoutPackageInput | PassCreateOrConnectWithoutPackageInput[]
    createMany?: PassCreateManyPackageInputEnvelope
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
  }

  export type SitePackageUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<SitePackageCreateWithoutPackageInput, SitePackageUncheckedCreateWithoutPackageInput> | SitePackageCreateWithoutPackageInput[] | SitePackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: SitePackageCreateOrConnectWithoutPackageInput | SitePackageCreateOrConnectWithoutPackageInput[]
    createMany?: SitePackageCreateManyPackageInputEnvelope
    connect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
  }

  export type PassUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PassCreateWithoutPackageInput, PassUncheckedCreateWithoutPackageInput> | PassCreateWithoutPackageInput[] | PassUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PassCreateOrConnectWithoutPackageInput | PassCreateOrConnectWithoutPackageInput[]
    upsert?: PassUpsertWithWhereUniqueWithoutPackageInput | PassUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PassCreateManyPackageInputEnvelope
    set?: PassWhereUniqueInput | PassWhereUniqueInput[]
    disconnect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    delete?: PassWhereUniqueInput | PassWhereUniqueInput[]
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    update?: PassUpdateWithWhereUniqueWithoutPackageInput | PassUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PassUpdateManyWithWhereWithoutPackageInput | PassUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PassScalarWhereInput | PassScalarWhereInput[]
  }

  export type SitePackageUpdateManyWithoutPackageNestedInput = {
    create?: XOR<SitePackageCreateWithoutPackageInput, SitePackageUncheckedCreateWithoutPackageInput> | SitePackageCreateWithoutPackageInput[] | SitePackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: SitePackageCreateOrConnectWithoutPackageInput | SitePackageCreateOrConnectWithoutPackageInput[]
    upsert?: SitePackageUpsertWithWhereUniqueWithoutPackageInput | SitePackageUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: SitePackageCreateManyPackageInputEnvelope
    set?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    disconnect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    delete?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    connect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    update?: SitePackageUpdateWithWhereUniqueWithoutPackageInput | SitePackageUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: SitePackageUpdateManyWithWhereWithoutPackageInput | SitePackageUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: SitePackageScalarWhereInput | SitePackageScalarWhereInput[]
  }

  export type RegionUpdateOneWithoutPackagesNestedInput = {
    create?: XOR<RegionCreateWithoutPackagesInput, RegionUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutPackagesInput
    upsert?: RegionUpsertWithoutPackagesInput
    disconnect?: RegionWhereInput | boolean
    delete?: RegionWhereInput | boolean
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutPackagesInput, RegionUpdateWithoutPackagesInput>, RegionUncheckedUpdateWithoutPackagesInput>
  }

  export type PassUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PassCreateWithoutPackageInput, PassUncheckedCreateWithoutPackageInput> | PassCreateWithoutPackageInput[] | PassUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PassCreateOrConnectWithoutPackageInput | PassCreateOrConnectWithoutPackageInput[]
    upsert?: PassUpsertWithWhereUniqueWithoutPackageInput | PassUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PassCreateManyPackageInputEnvelope
    set?: PassWhereUniqueInput | PassWhereUniqueInput[]
    disconnect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    delete?: PassWhereUniqueInput | PassWhereUniqueInput[]
    connect?: PassWhereUniqueInput | PassWhereUniqueInput[]
    update?: PassUpdateWithWhereUniqueWithoutPackageInput | PassUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PassUpdateManyWithWhereWithoutPackageInput | PassUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PassScalarWhereInput | PassScalarWhereInput[]
  }

  export type SitePackageUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<SitePackageCreateWithoutPackageInput, SitePackageUncheckedCreateWithoutPackageInput> | SitePackageCreateWithoutPackageInput[] | SitePackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: SitePackageCreateOrConnectWithoutPackageInput | SitePackageCreateOrConnectWithoutPackageInput[]
    upsert?: SitePackageUpsertWithWhereUniqueWithoutPackageInput | SitePackageUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: SitePackageCreateManyPackageInputEnvelope
    set?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    disconnect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    delete?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    connect?: SitePackageWhereUniqueInput | SitePackageWhereUniqueInput[]
    update?: SitePackageUpdateWithWhereUniqueWithoutPackageInput | SitePackageUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: SitePackageUpdateManyWithWhereWithoutPackageInput | SitePackageUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: SitePackageScalarWhereInput | SitePackageScalarWhereInput[]
  }

  export type SiteCreateNestedOneWithoutSitePackageInput = {
    create?: XOR<SiteCreateWithoutSitePackageInput, SiteUncheckedCreateWithoutSitePackageInput>
    connectOrCreate?: SiteCreateOrConnectWithoutSitePackageInput
    connect?: SiteWhereUniqueInput
  }

  export type PackageCreateNestedOneWithoutSitePackagesInput = {
    create?: XOR<PackageCreateWithoutSitePackagesInput, PackageUncheckedCreateWithoutSitePackagesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutSitePackagesInput
    connect?: PackageWhereUniqueInput
  }

  export type SiteUpdateOneRequiredWithoutSitePackageNestedInput = {
    create?: XOR<SiteCreateWithoutSitePackageInput, SiteUncheckedCreateWithoutSitePackageInput>
    connectOrCreate?: SiteCreateOrConnectWithoutSitePackageInput
    upsert?: SiteUpsertWithoutSitePackageInput
    connect?: SiteWhereUniqueInput
    update?: XOR<XOR<SiteUpdateToOneWithWhereWithoutSitePackageInput, SiteUpdateWithoutSitePackageInput>, SiteUncheckedUpdateWithoutSitePackageInput>
  }

  export type PackageUpdateOneRequiredWithoutSitePackagesNestedInput = {
    create?: XOR<PackageCreateWithoutSitePackagesInput, PackageUncheckedCreateWithoutSitePackagesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutSitePackagesInput
    upsert?: PackageUpsertWithoutSitePackagesInput
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutSitePackagesInput, PackageUpdateWithoutSitePackagesInput>, PackageUncheckedUpdateWithoutSitePackagesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type OrderCreateWithoutUserInput = {
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    passes?: PassCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    passes?: PassUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PassCreateWithoutUserInput = {
    name: string
    codePass: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    package?: PackageCreateNestedOneWithoutPassesInput
    order: OrderCreateNestedOneWithoutPassesInput
  }

  export type PassUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    packageId?: number | null
    codePass: string
    orderId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassCreateOrConnectWithoutUserInput = {
    where: PassWhereUniqueInput
    create: XOR<PassCreateWithoutUserInput, PassUncheckedCreateWithoutUserInput>
  }

  export type PassCreateManyUserInputEnvelope = {
    data: PassCreateManyUserInput | PassCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
    date?: DateTimeFilter<"Order"> | Date | string
    amount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
  }

  export type PassUpsertWithWhereUniqueWithoutUserInput = {
    where: PassWhereUniqueInput
    update: XOR<PassUpdateWithoutUserInput, PassUncheckedUpdateWithoutUserInput>
    create: XOR<PassCreateWithoutUserInput, PassUncheckedCreateWithoutUserInput>
  }

  export type PassUpdateWithWhereUniqueWithoutUserInput = {
    where: PassWhereUniqueInput
    data: XOR<PassUpdateWithoutUserInput, PassUncheckedUpdateWithoutUserInput>
  }

  export type PassUpdateManyWithWhereWithoutUserInput = {
    where: PassScalarWhereInput
    data: XOR<PassUpdateManyMutationInput, PassUncheckedUpdateManyWithoutUserInput>
  }

  export type PassScalarWhereInput = {
    AND?: PassScalarWhereInput | PassScalarWhereInput[]
    OR?: PassScalarWhereInput[]
    NOT?: PassScalarWhereInput | PassScalarWhereInput[]
    id?: IntFilter<"Pass"> | number
    name?: StringFilter<"Pass"> | string
    packageId?: IntNullableFilter<"Pass"> | number | null
    codePass?: StringFilter<"Pass"> | string
    orderId?: IntFilter<"Pass"> | number
    userId?: IntFilter<"Pass"> | number
    isActive?: BoolFilter<"Pass"> | boolean
    createdAt?: DateTimeFilter<"Pass"> | Date | string
    updatedAt?: DateTimeFilter<"Pass"> | Date | string
  }

  export type UserCreateWithoutOrdersInput = {
    name: string
    email: string
    password: string
    createAt?: Date | string
    updatedAt?: Date | string
    passes?: PassCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    email: string
    password: string
    createAt?: Date | string
    updatedAt?: Date | string
    passes?: PassUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type PassCreateWithoutOrderInput = {
    name: string
    codePass: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    package?: PackageCreateNestedOneWithoutPassesInput
    user: UserCreateNestedOneWithoutPassesInput
  }

  export type PassUncheckedCreateWithoutOrderInput = {
    id?: number
    name: string
    packageId?: number | null
    codePass: string
    userId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassCreateOrConnectWithoutOrderInput = {
    where: PassWhereUniqueInput
    create: XOR<PassCreateWithoutOrderInput, PassUncheckedCreateWithoutOrderInput>
  }

  export type PassCreateManyOrderInputEnvelope = {
    data: PassCreateManyOrderInput | PassCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passes?: PassUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passes?: PassUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PassUpsertWithWhereUniqueWithoutOrderInput = {
    where: PassWhereUniqueInput
    update: XOR<PassUpdateWithoutOrderInput, PassUncheckedUpdateWithoutOrderInput>
    create: XOR<PassCreateWithoutOrderInput, PassUncheckedCreateWithoutOrderInput>
  }

  export type PassUpdateWithWhereUniqueWithoutOrderInput = {
    where: PassWhereUniqueInput
    data: XOR<PassUpdateWithoutOrderInput, PassUncheckedUpdateWithoutOrderInput>
  }

  export type PassUpdateManyWithWhereWithoutOrderInput = {
    where: PassScalarWhereInput
    data: XOR<PassUpdateManyMutationInput, PassUncheckedUpdateManyWithoutOrderInput>
  }

  export type PackageCreateWithoutPassesInput = {
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    name: string
    media: string
    sitePackages?: SitePackageCreateNestedManyWithoutPackageInput
    region?: RegionCreateNestedOneWithoutPackagesInput
  }

  export type PackageUncheckedCreateWithoutPassesInput = {
    id?: number
    regionId?: number | null
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    name: string
    media: string
    sitePackages?: SitePackageUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutPassesInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutPassesInput, PackageUncheckedCreateWithoutPassesInput>
  }

  export type OrderCreateWithoutPassesInput = {
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutPassesInput = {
    id?: number
    userId: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateOrConnectWithoutPassesInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutPassesInput, OrderUncheckedCreateWithoutPassesInput>
  }

  export type UserCreateWithoutPassesInput = {
    name: string
    email: string
    password: string
    createAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPassesInput = {
    id?: number
    name: string
    email: string
    password: string
    createAt?: Date | string
    updatedAt?: Date | string
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPassesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPassesInput, UserUncheckedCreateWithoutPassesInput>
  }

  export type PackageUpsertWithoutPassesInput = {
    update: XOR<PackageUpdateWithoutPassesInput, PackageUncheckedUpdateWithoutPassesInput>
    create: XOR<PackageCreateWithoutPassesInput, PackageUncheckedCreateWithoutPassesInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutPassesInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutPassesInput, PackageUncheckedUpdateWithoutPassesInput>
  }

  export type PackageUpdateWithoutPassesInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    media?: StringFieldUpdateOperationsInput | string
    sitePackages?: SitePackageUpdateManyWithoutPackageNestedInput
    region?: RegionUpdateOneWithoutPackagesNestedInput
  }

  export type PackageUncheckedUpdateWithoutPassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    media?: StringFieldUpdateOperationsInput | string
    sitePackages?: SitePackageUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type OrderUpsertWithoutPassesInput = {
    update: XOR<OrderUpdateWithoutPassesInput, OrderUncheckedUpdateWithoutPassesInput>
    create: XOR<OrderCreateWithoutPassesInput, OrderUncheckedCreateWithoutPassesInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutPassesInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutPassesInput, OrderUncheckedUpdateWithoutPassesInput>
  }

  export type OrderUpdateWithoutPassesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutPassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutPassesInput = {
    update: XOR<UserUpdateWithoutPassesInput, UserUncheckedUpdateWithoutPassesInput>
    create: XOR<UserCreateWithoutPassesInput, UserUncheckedCreateWithoutPassesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPassesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPassesInput, UserUncheckedUpdateWithoutPassesInput>
  }

  export type UserUpdateWithoutPassesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SiteCreateWithoutRegionInput = {
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: SiteCategoryCreateNestedOneWithoutSitesInput
    events?: EventCreateNestedManyWithoutSiteInput
    siteUsers?: SiteUserCreateNestedManyWithoutSiteInput
    sitePackage?: SitePackageCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutRegionInput = {
    id?: number
    categoryId?: number | null
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutSiteInput
    siteUsers?: SiteUserUncheckedCreateNestedManyWithoutSiteInput
    sitePackage?: SitePackageUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteCreateOrConnectWithoutRegionInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutRegionInput, SiteUncheckedCreateWithoutRegionInput>
  }

  export type SiteCreateManyRegionInputEnvelope = {
    data: SiteCreateManyRegionInput | SiteCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type PackageCreateWithoutRegionInput = {
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    name: string
    media: string
    passes?: PassCreateNestedManyWithoutPackageInput
    sitePackages?: SitePackageCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutRegionInput = {
    id?: number
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    name: string
    media: string
    passes?: PassUncheckedCreateNestedManyWithoutPackageInput
    sitePackages?: SitePackageUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutRegionInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutRegionInput, PackageUncheckedCreateWithoutRegionInput>
  }

  export type PackageCreateManyRegionInputEnvelope = {
    data: PackageCreateManyRegionInput | PackageCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type SiteCategoryCreateWithoutRegionInput = {
    name: string
    media?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    sites?: SiteCreateNestedManyWithoutCategoryInput
  }

  export type SiteCategoryUncheckedCreateWithoutRegionInput = {
    id?: number
    name: string
    media?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type SiteCategoryCreateOrConnectWithoutRegionInput = {
    where: SiteCategoryWhereUniqueInput
    create: XOR<SiteCategoryCreateWithoutRegionInput, SiteCategoryUncheckedCreateWithoutRegionInput>
  }

  export type SiteCategoryCreateManyRegionInputEnvelope = {
    data: SiteCategoryCreateManyRegionInput | SiteCategoryCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type SiteUpsertWithWhereUniqueWithoutRegionInput = {
    where: SiteWhereUniqueInput
    update: XOR<SiteUpdateWithoutRegionInput, SiteUncheckedUpdateWithoutRegionInput>
    create: XOR<SiteCreateWithoutRegionInput, SiteUncheckedCreateWithoutRegionInput>
  }

  export type SiteUpdateWithWhereUniqueWithoutRegionInput = {
    where: SiteWhereUniqueInput
    data: XOR<SiteUpdateWithoutRegionInput, SiteUncheckedUpdateWithoutRegionInput>
  }

  export type SiteUpdateManyWithWhereWithoutRegionInput = {
    where: SiteScalarWhereInput
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyWithoutRegionInput>
  }

  export type SiteScalarWhereInput = {
    AND?: SiteScalarWhereInput | SiteScalarWhereInput[]
    OR?: SiteScalarWhereInput[]
    NOT?: SiteScalarWhereInput | SiteScalarWhereInput[]
    id?: IntFilter<"Site"> | number
    regionId?: IntFilter<"Site"> | number
    categoryId?: IntNullableFilter<"Site"> | number | null
    name?: StringFilter<"Site"> | string
    description?: StringNullableFilter<"Site"> | string | null
    city?: StringNullableFilter<"Site"> | string | null
    postalCode?: StringNullableFilter<"Site"> | string | null
    address?: StringNullableFilter<"Site"> | string | null
    latitude?: DecimalNullableFilter<"Site"> | Decimal | DecimalJsLike | number | string | null
    longitude?: DecimalNullableFilter<"Site"> | Decimal | DecimalJsLike | number | string | null
    media?: StringNullableFilter<"Site"> | string | null
    contact?: StringNullableFilter<"Site"> | string | null
    information?: StringNullableFilter<"Site"> | string | null
    createdAt?: DateTimeFilter<"Site"> | Date | string
    updatedAt?: DateTimeFilter<"Site"> | Date | string
  }

  export type PackageUpsertWithWhereUniqueWithoutRegionInput = {
    where: PackageWhereUniqueInput
    update: XOR<PackageUpdateWithoutRegionInput, PackageUncheckedUpdateWithoutRegionInput>
    create: XOR<PackageCreateWithoutRegionInput, PackageUncheckedCreateWithoutRegionInput>
  }

  export type PackageUpdateWithWhereUniqueWithoutRegionInput = {
    where: PackageWhereUniqueInput
    data: XOR<PackageUpdateWithoutRegionInput, PackageUncheckedUpdateWithoutRegionInput>
  }

  export type PackageUpdateManyWithWhereWithoutRegionInput = {
    where: PackageScalarWhereInput
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyWithoutRegionInput>
  }

  export type PackageScalarWhereInput = {
    AND?: PackageScalarWhereInput | PackageScalarWhereInput[]
    OR?: PackageScalarWhereInput[]
    NOT?: PackageScalarWhereInput | PackageScalarWhereInput[]
    id?: IntFilter<"Package"> | number
    regionId?: IntNullableFilter<"Package"> | number | null
    price?: DecimalFilter<"Package"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"Package"> | string | null
    name?: StringFilter<"Package"> | string
    media?: StringFilter<"Package"> | string
  }

  export type SiteCategoryUpsertWithWhereUniqueWithoutRegionInput = {
    where: SiteCategoryWhereUniqueInput
    update: XOR<SiteCategoryUpdateWithoutRegionInput, SiteCategoryUncheckedUpdateWithoutRegionInput>
    create: XOR<SiteCategoryCreateWithoutRegionInput, SiteCategoryUncheckedCreateWithoutRegionInput>
  }

  export type SiteCategoryUpdateWithWhereUniqueWithoutRegionInput = {
    where: SiteCategoryWhereUniqueInput
    data: XOR<SiteCategoryUpdateWithoutRegionInput, SiteCategoryUncheckedUpdateWithoutRegionInput>
  }

  export type SiteCategoryUpdateManyWithWhereWithoutRegionInput = {
    where: SiteCategoryScalarWhereInput
    data: XOR<SiteCategoryUpdateManyMutationInput, SiteCategoryUncheckedUpdateManyWithoutRegionInput>
  }

  export type SiteCategoryScalarWhereInput = {
    AND?: SiteCategoryScalarWhereInput | SiteCategoryScalarWhereInput[]
    OR?: SiteCategoryScalarWhereInput[]
    NOT?: SiteCategoryScalarWhereInput | SiteCategoryScalarWhereInput[]
    id?: IntFilter<"SiteCategory"> | number
    regionId?: IntFilter<"SiteCategory"> | number
    name?: StringFilter<"SiteCategory"> | string
    media?: StringNullableFilter<"SiteCategory"> | string | null
    created_at?: DateTimeFilter<"SiteCategory"> | Date | string
    updated_at?: DateTimeFilter<"SiteCategory"> | Date | string
  }

  export type RegionCreateWithoutSitesInput = {
    email?: string | null
    password?: string | null
    media?: string | null
    description?: string | null
    name: string
    createAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageCreateNestedManyWithoutRegionInput
    categories?: SiteCategoryCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutSitesInput = {
    id?: number
    email?: string | null
    password?: string | null
    media?: string | null
    description?: string | null
    name: string
    createAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageUncheckedCreateNestedManyWithoutRegionInput
    categories?: SiteCategoryUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutSitesInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutSitesInput, RegionUncheckedCreateWithoutSitesInput>
  }

  export type SiteCategoryCreateWithoutSitesInput = {
    name: string
    media?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    region: RegionCreateNestedOneWithoutCategoriesInput
  }

  export type SiteCategoryUncheckedCreateWithoutSitesInput = {
    id?: number
    regionId: number
    name: string
    media?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SiteCategoryCreateOrConnectWithoutSitesInput = {
    where: SiteCategoryWhereUniqueInput
    create: XOR<SiteCategoryCreateWithoutSitesInput, SiteCategoryUncheckedCreateWithoutSitesInput>
  }

  export type EventCreateWithoutSiteInput = {
    name: string
    description?: string | null
    media?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventUncheckedCreateWithoutSiteInput = {
    id?: number
    name: string
    description?: string | null
    media?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventCreateOrConnectWithoutSiteInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutSiteInput, EventUncheckedCreateWithoutSiteInput>
  }

  export type EventCreateManySiteInputEnvelope = {
    data: EventCreateManySiteInput | EventCreateManySiteInput[]
    skipDuplicates?: boolean
  }

  export type SiteUserCreateWithoutSiteInput = {
    name: string
    email: string
    password: string
  }

  export type SiteUserUncheckedCreateWithoutSiteInput = {
    id?: number
    name: string
    email: string
    password: string
  }

  export type SiteUserCreateOrConnectWithoutSiteInput = {
    where: SiteUserWhereUniqueInput
    create: XOR<SiteUserCreateWithoutSiteInput, SiteUserUncheckedCreateWithoutSiteInput>
  }

  export type SiteUserCreateManySiteInputEnvelope = {
    data: SiteUserCreateManySiteInput | SiteUserCreateManySiteInput[]
    skipDuplicates?: boolean
  }

  export type SitePackageCreateWithoutSiteInput = {
    package: PackageCreateNestedOneWithoutSitePackagesInput
  }

  export type SitePackageUncheckedCreateWithoutSiteInput = {
    packageId: number
  }

  export type SitePackageCreateOrConnectWithoutSiteInput = {
    where: SitePackageWhereUniqueInput
    create: XOR<SitePackageCreateWithoutSiteInput, SitePackageUncheckedCreateWithoutSiteInput>
  }

  export type SitePackageCreateManySiteInputEnvelope = {
    data: SitePackageCreateManySiteInput | SitePackageCreateManySiteInput[]
    skipDuplicates?: boolean
  }

  export type RegionUpsertWithoutSitesInput = {
    update: XOR<RegionUpdateWithoutSitesInput, RegionUncheckedUpdateWithoutSitesInput>
    create: XOR<RegionCreateWithoutSitesInput, RegionUncheckedCreateWithoutSitesInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutSitesInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutSitesInput, RegionUncheckedUpdateWithoutSitesInput>
  }

  export type RegionUpdateWithoutSitesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUpdateManyWithoutRegionNestedInput
    categories?: SiteCategoryUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutSitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUncheckedUpdateManyWithoutRegionNestedInput
    categories?: SiteCategoryUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type SiteCategoryUpsertWithoutSitesInput = {
    update: XOR<SiteCategoryUpdateWithoutSitesInput, SiteCategoryUncheckedUpdateWithoutSitesInput>
    create: XOR<SiteCategoryCreateWithoutSitesInput, SiteCategoryUncheckedCreateWithoutSitesInput>
    where?: SiteCategoryWhereInput
  }

  export type SiteCategoryUpdateToOneWithWhereWithoutSitesInput = {
    where?: SiteCategoryWhereInput
    data: XOR<SiteCategoryUpdateWithoutSitesInput, SiteCategoryUncheckedUpdateWithoutSitesInput>
  }

  export type SiteCategoryUpdateWithoutSitesInput = {
    name?: StringFieldUpdateOperationsInput | string
    media?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type SiteCategoryUncheckedUpdateWithoutSitesInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    media?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUpsertWithWhereUniqueWithoutSiteInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutSiteInput, EventUncheckedUpdateWithoutSiteInput>
    create: XOR<EventCreateWithoutSiteInput, EventUncheckedCreateWithoutSiteInput>
  }

  export type EventUpdateWithWhereUniqueWithoutSiteInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutSiteInput, EventUncheckedUpdateWithoutSiteInput>
  }

  export type EventUpdateManyWithWhereWithoutSiteInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutSiteInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: IntFilter<"Event"> | number
    siteId?: IntFilter<"Event"> | number
    name?: StringFilter<"Event"> | string
    description?: StringNullableFilter<"Event"> | string | null
    media?: StringNullableFilter<"Event"> | string | null
    startDate?: DateTimeFilter<"Event"> | Date | string
    endDate?: DateTimeFilter<"Event"> | Date | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
  }

  export type SiteUserUpsertWithWhereUniqueWithoutSiteInput = {
    where: SiteUserWhereUniqueInput
    update: XOR<SiteUserUpdateWithoutSiteInput, SiteUserUncheckedUpdateWithoutSiteInput>
    create: XOR<SiteUserCreateWithoutSiteInput, SiteUserUncheckedCreateWithoutSiteInput>
  }

  export type SiteUserUpdateWithWhereUniqueWithoutSiteInput = {
    where: SiteUserWhereUniqueInput
    data: XOR<SiteUserUpdateWithoutSiteInput, SiteUserUncheckedUpdateWithoutSiteInput>
  }

  export type SiteUserUpdateManyWithWhereWithoutSiteInput = {
    where: SiteUserScalarWhereInput
    data: XOR<SiteUserUpdateManyMutationInput, SiteUserUncheckedUpdateManyWithoutSiteInput>
  }

  export type SiteUserScalarWhereInput = {
    AND?: SiteUserScalarWhereInput | SiteUserScalarWhereInput[]
    OR?: SiteUserScalarWhereInput[]
    NOT?: SiteUserScalarWhereInput | SiteUserScalarWhereInput[]
    id?: IntFilter<"SiteUser"> | number
    siteId?: IntFilter<"SiteUser"> | number
    name?: StringFilter<"SiteUser"> | string
    email?: StringFilter<"SiteUser"> | string
    password?: StringFilter<"SiteUser"> | string
  }

  export type SitePackageUpsertWithWhereUniqueWithoutSiteInput = {
    where: SitePackageWhereUniqueInput
    update: XOR<SitePackageUpdateWithoutSiteInput, SitePackageUncheckedUpdateWithoutSiteInput>
    create: XOR<SitePackageCreateWithoutSiteInput, SitePackageUncheckedCreateWithoutSiteInput>
  }

  export type SitePackageUpdateWithWhereUniqueWithoutSiteInput = {
    where: SitePackageWhereUniqueInput
    data: XOR<SitePackageUpdateWithoutSiteInput, SitePackageUncheckedUpdateWithoutSiteInput>
  }

  export type SitePackageUpdateManyWithWhereWithoutSiteInput = {
    where: SitePackageScalarWhereInput
    data: XOR<SitePackageUpdateManyMutationInput, SitePackageUncheckedUpdateManyWithoutSiteInput>
  }

  export type SitePackageScalarWhereInput = {
    AND?: SitePackageScalarWhereInput | SitePackageScalarWhereInput[]
    OR?: SitePackageScalarWhereInput[]
    NOT?: SitePackageScalarWhereInput | SitePackageScalarWhereInput[]
    siteId?: IntFilter<"SitePackage"> | number
    packageId?: IntFilter<"SitePackage"> | number
  }

  export type SiteCreateWithoutCategoryInput = {
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutSitesInput
    events?: EventCreateNestedManyWithoutSiteInput
    siteUsers?: SiteUserCreateNestedManyWithoutSiteInput
    sitePackage?: SitePackageCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutCategoryInput = {
    id?: number
    regionId: number
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutSiteInput
    siteUsers?: SiteUserUncheckedCreateNestedManyWithoutSiteInput
    sitePackage?: SitePackageUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteCreateOrConnectWithoutCategoryInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutCategoryInput, SiteUncheckedCreateWithoutCategoryInput>
  }

  export type SiteCreateManyCategoryInputEnvelope = {
    data: SiteCreateManyCategoryInput | SiteCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type RegionCreateWithoutCategoriesInput = {
    email?: string | null
    password?: string | null
    media?: string | null
    description?: string | null
    name: string
    createAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteCreateNestedManyWithoutRegionInput
    packages?: PackageCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutCategoriesInput = {
    id?: number
    email?: string | null
    password?: string | null
    media?: string | null
    description?: string | null
    name: string
    createAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutRegionInput
    packages?: PackageUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutCategoriesInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutCategoriesInput, RegionUncheckedCreateWithoutCategoriesInput>
  }

  export type SiteUpsertWithWhereUniqueWithoutCategoryInput = {
    where: SiteWhereUniqueInput
    update: XOR<SiteUpdateWithoutCategoryInput, SiteUncheckedUpdateWithoutCategoryInput>
    create: XOR<SiteCreateWithoutCategoryInput, SiteUncheckedCreateWithoutCategoryInput>
  }

  export type SiteUpdateWithWhereUniqueWithoutCategoryInput = {
    where: SiteWhereUniqueInput
    data: XOR<SiteUpdateWithoutCategoryInput, SiteUncheckedUpdateWithoutCategoryInput>
  }

  export type SiteUpdateManyWithWhereWithoutCategoryInput = {
    where: SiteScalarWhereInput
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyWithoutCategoryInput>
  }

  export type RegionUpsertWithoutCategoriesInput = {
    update: XOR<RegionUpdateWithoutCategoriesInput, RegionUncheckedUpdateWithoutCategoriesInput>
    create: XOR<RegionCreateWithoutCategoriesInput, RegionUncheckedCreateWithoutCategoriesInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutCategoriesInput, RegionUncheckedUpdateWithoutCategoriesInput>
  }

  export type RegionUpdateWithoutCategoriesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUpdateManyWithoutRegionNestedInput
    packages?: PackageUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutRegionNestedInput
    packages?: PackageUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type SiteCreateWithoutEventsInput = {
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutSitesInput
    category?: SiteCategoryCreateNestedOneWithoutSitesInput
    siteUsers?: SiteUserCreateNestedManyWithoutSiteInput
    sitePackage?: SitePackageCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutEventsInput = {
    id?: number
    regionId: number
    categoryId?: number | null
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    siteUsers?: SiteUserUncheckedCreateNestedManyWithoutSiteInput
    sitePackage?: SitePackageUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteCreateOrConnectWithoutEventsInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutEventsInput, SiteUncheckedCreateWithoutEventsInput>
  }

  export type SiteUpsertWithoutEventsInput = {
    update: XOR<SiteUpdateWithoutEventsInput, SiteUncheckedUpdateWithoutEventsInput>
    create: XOR<SiteCreateWithoutEventsInput, SiteUncheckedCreateWithoutEventsInput>
    where?: SiteWhereInput
  }

  export type SiteUpdateToOneWithWhereWithoutEventsInput = {
    where?: SiteWhereInput
    data: XOR<SiteUpdateWithoutEventsInput, SiteUncheckedUpdateWithoutEventsInput>
  }

  export type SiteUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutSitesNestedInput
    category?: SiteCategoryUpdateOneWithoutSitesNestedInput
    siteUsers?: SiteUserUpdateManyWithoutSiteNestedInput
    sitePackage?: SitePackageUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    siteUsers?: SiteUserUncheckedUpdateManyWithoutSiteNestedInput
    sitePackage?: SitePackageUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteCreateWithoutSiteUsersInput = {
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutSitesInput
    category?: SiteCategoryCreateNestedOneWithoutSitesInput
    events?: EventCreateNestedManyWithoutSiteInput
    sitePackage?: SitePackageCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutSiteUsersInput = {
    id?: number
    regionId: number
    categoryId?: number | null
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutSiteInput
    sitePackage?: SitePackageUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteCreateOrConnectWithoutSiteUsersInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutSiteUsersInput, SiteUncheckedCreateWithoutSiteUsersInput>
  }

  export type SiteUpsertWithoutSiteUsersInput = {
    update: XOR<SiteUpdateWithoutSiteUsersInput, SiteUncheckedUpdateWithoutSiteUsersInput>
    create: XOR<SiteCreateWithoutSiteUsersInput, SiteUncheckedCreateWithoutSiteUsersInput>
    where?: SiteWhereInput
  }

  export type SiteUpdateToOneWithWhereWithoutSiteUsersInput = {
    where?: SiteWhereInput
    data: XOR<SiteUpdateWithoutSiteUsersInput, SiteUncheckedUpdateWithoutSiteUsersInput>
  }

  export type SiteUpdateWithoutSiteUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutSitesNestedInput
    category?: SiteCategoryUpdateOneWithoutSitesNestedInput
    events?: EventUpdateManyWithoutSiteNestedInput
    sitePackage?: SitePackageUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutSiteUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutSiteNestedInput
    sitePackage?: SitePackageUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type PassCreateWithoutPackageInput = {
    name: string
    codePass: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    order: OrderCreateNestedOneWithoutPassesInput
    user: UserCreateNestedOneWithoutPassesInput
  }

  export type PassUncheckedCreateWithoutPackageInput = {
    id?: number
    name: string
    codePass: string
    orderId: number
    userId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassCreateOrConnectWithoutPackageInput = {
    where: PassWhereUniqueInput
    create: XOR<PassCreateWithoutPackageInput, PassUncheckedCreateWithoutPackageInput>
  }

  export type PassCreateManyPackageInputEnvelope = {
    data: PassCreateManyPackageInput | PassCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type SitePackageCreateWithoutPackageInput = {
    site: SiteCreateNestedOneWithoutSitePackageInput
  }

  export type SitePackageUncheckedCreateWithoutPackageInput = {
    siteId: number
  }

  export type SitePackageCreateOrConnectWithoutPackageInput = {
    where: SitePackageWhereUniqueInput
    create: XOR<SitePackageCreateWithoutPackageInput, SitePackageUncheckedCreateWithoutPackageInput>
  }

  export type SitePackageCreateManyPackageInputEnvelope = {
    data: SitePackageCreateManyPackageInput | SitePackageCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type RegionCreateWithoutPackagesInput = {
    email?: string | null
    password?: string | null
    media?: string | null
    description?: string | null
    name: string
    createAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteCreateNestedManyWithoutRegionInput
    categories?: SiteCategoryCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateWithoutPackagesInput = {
    id?: number
    email?: string | null
    password?: string | null
    media?: string | null
    description?: string | null
    name: string
    createAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutRegionInput
    categories?: SiteCategoryUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionCreateOrConnectWithoutPackagesInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutPackagesInput, RegionUncheckedCreateWithoutPackagesInput>
  }

  export type PassUpsertWithWhereUniqueWithoutPackageInput = {
    where: PassWhereUniqueInput
    update: XOR<PassUpdateWithoutPackageInput, PassUncheckedUpdateWithoutPackageInput>
    create: XOR<PassCreateWithoutPackageInput, PassUncheckedCreateWithoutPackageInput>
  }

  export type PassUpdateWithWhereUniqueWithoutPackageInput = {
    where: PassWhereUniqueInput
    data: XOR<PassUpdateWithoutPackageInput, PassUncheckedUpdateWithoutPackageInput>
  }

  export type PassUpdateManyWithWhereWithoutPackageInput = {
    where: PassScalarWhereInput
    data: XOR<PassUpdateManyMutationInput, PassUncheckedUpdateManyWithoutPackageInput>
  }

  export type SitePackageUpsertWithWhereUniqueWithoutPackageInput = {
    where: SitePackageWhereUniqueInput
    update: XOR<SitePackageUpdateWithoutPackageInput, SitePackageUncheckedUpdateWithoutPackageInput>
    create: XOR<SitePackageCreateWithoutPackageInput, SitePackageUncheckedCreateWithoutPackageInput>
  }

  export type SitePackageUpdateWithWhereUniqueWithoutPackageInput = {
    where: SitePackageWhereUniqueInput
    data: XOR<SitePackageUpdateWithoutPackageInput, SitePackageUncheckedUpdateWithoutPackageInput>
  }

  export type SitePackageUpdateManyWithWhereWithoutPackageInput = {
    where: SitePackageScalarWhereInput
    data: XOR<SitePackageUpdateManyMutationInput, SitePackageUncheckedUpdateManyWithoutPackageInput>
  }

  export type RegionUpsertWithoutPackagesInput = {
    update: XOR<RegionUpdateWithoutPackagesInput, RegionUncheckedUpdateWithoutPackagesInput>
    create: XOR<RegionCreateWithoutPackagesInput, RegionUncheckedCreateWithoutPackagesInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutPackagesInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutPackagesInput, RegionUncheckedUpdateWithoutPackagesInput>
  }

  export type RegionUpdateWithoutPackagesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUpdateManyWithoutRegionNestedInput
    categories?: SiteCategoryUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateWithoutPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutRegionNestedInput
    categories?: SiteCategoryUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type SiteCreateWithoutSitePackageInput = {
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutSitesInput
    category?: SiteCategoryCreateNestedOneWithoutSitesInput
    events?: EventCreateNestedManyWithoutSiteInput
    siteUsers?: SiteUserCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutSitePackageInput = {
    id?: number
    regionId: number
    categoryId?: number | null
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutSiteInput
    siteUsers?: SiteUserUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteCreateOrConnectWithoutSitePackageInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutSitePackageInput, SiteUncheckedCreateWithoutSitePackageInput>
  }

  export type PackageCreateWithoutSitePackagesInput = {
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    name: string
    media: string
    passes?: PassCreateNestedManyWithoutPackageInput
    region?: RegionCreateNestedOneWithoutPackagesInput
  }

  export type PackageUncheckedCreateWithoutSitePackagesInput = {
    id?: number
    regionId?: number | null
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    name: string
    media: string
    passes?: PassUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutSitePackagesInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutSitePackagesInput, PackageUncheckedCreateWithoutSitePackagesInput>
  }

  export type SiteUpsertWithoutSitePackageInput = {
    update: XOR<SiteUpdateWithoutSitePackageInput, SiteUncheckedUpdateWithoutSitePackageInput>
    create: XOR<SiteCreateWithoutSitePackageInput, SiteUncheckedCreateWithoutSitePackageInput>
    where?: SiteWhereInput
  }

  export type SiteUpdateToOneWithWhereWithoutSitePackageInput = {
    where?: SiteWhereInput
    data: XOR<SiteUpdateWithoutSitePackageInput, SiteUncheckedUpdateWithoutSitePackageInput>
  }

  export type SiteUpdateWithoutSitePackageInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutSitesNestedInput
    category?: SiteCategoryUpdateOneWithoutSitesNestedInput
    events?: EventUpdateManyWithoutSiteNestedInput
    siteUsers?: SiteUserUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutSitePackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutSiteNestedInput
    siteUsers?: SiteUserUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type PackageUpsertWithoutSitePackagesInput = {
    update: XOR<PackageUpdateWithoutSitePackagesInput, PackageUncheckedUpdateWithoutSitePackagesInput>
    create: XOR<PackageCreateWithoutSitePackagesInput, PackageUncheckedCreateWithoutSitePackagesInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutSitePackagesInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutSitePackagesInput, PackageUncheckedUpdateWithoutSitePackagesInput>
  }

  export type PackageUpdateWithoutSitePackagesInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    media?: StringFieldUpdateOperationsInput | string
    passes?: PassUpdateManyWithoutPackageNestedInput
    region?: RegionUpdateOneWithoutPackagesNestedInput
  }

  export type PackageUncheckedUpdateWithoutSitePackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    media?: StringFieldUpdateOperationsInput | string
    passes?: PassUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type OrderCreateManyUserInput = {
    id?: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassCreateManyUserInput = {
    id?: number
    name: string
    packageId?: number | null
    codePass: string
    orderId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passes?: PassUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passes?: PassUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    codePass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneWithoutPassesNestedInput
    order?: OrderUpdateOneRequiredWithoutPassesNestedInput
  }

  export type PassUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    packageId?: NullableIntFieldUpdateOperationsInput | number | null
    codePass?: StringFieldUpdateOperationsInput | string
    orderId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    packageId?: NullableIntFieldUpdateOperationsInput | number | null
    codePass?: StringFieldUpdateOperationsInput | string
    orderId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassCreateManyOrderInput = {
    id?: number
    name: string
    packageId?: number | null
    codePass: string
    userId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassUpdateWithoutOrderInput = {
    name?: StringFieldUpdateOperationsInput | string
    codePass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneWithoutPassesNestedInput
    user?: UserUpdateOneRequiredWithoutPassesNestedInput
  }

  export type PassUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    packageId?: NullableIntFieldUpdateOperationsInput | number | null
    codePass?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    packageId?: NullableIntFieldUpdateOperationsInput | number | null
    codePass?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteCreateManyRegionInput = {
    id?: number
    categoryId?: number | null
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageCreateManyRegionInput = {
    id?: number
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    name: string
    media: string
  }

  export type SiteCategoryCreateManyRegionInput = {
    id?: number
    name: string
    media?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SiteUpdateWithoutRegionInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: SiteCategoryUpdateOneWithoutSitesNestedInput
    events?: EventUpdateManyWithoutSiteNestedInput
    siteUsers?: SiteUserUpdateManyWithoutSiteNestedInput
    sitePackage?: SitePackageUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutRegionInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutSiteNestedInput
    siteUsers?: SiteUserUncheckedUpdateManyWithoutSiteNestedInput
    sitePackage?: SitePackageUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateManyWithoutRegionInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageUpdateWithoutRegionInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    media?: StringFieldUpdateOperationsInput | string
    passes?: PassUpdateManyWithoutPackageNestedInput
    sitePackages?: SitePackageUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutRegionInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    media?: StringFieldUpdateOperationsInput | string
    passes?: PassUncheckedUpdateManyWithoutPackageNestedInput
    sitePackages?: SitePackageUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateManyWithoutRegionInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    media?: StringFieldUpdateOperationsInput | string
  }

  export type SiteCategoryUpdateWithoutRegionInput = {
    name?: StringFieldUpdateOperationsInput | string
    media?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUpdateManyWithoutCategoryNestedInput
  }

  export type SiteCategoryUncheckedUpdateWithoutRegionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    media?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type SiteCategoryUncheckedUpdateManyWithoutRegionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    media?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateManySiteInput = {
    id?: number
    name: string
    description?: string | null
    media?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteUserCreateManySiteInput = {
    id?: number
    name: string
    email: string
    password: string
  }

  export type SitePackageCreateManySiteInput = {
    packageId: number
  }

  export type EventUpdateWithoutSiteInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteUserUpdateWithoutSiteInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type SiteUserUncheckedUpdateWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type SiteUserUncheckedUpdateManyWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type SitePackageUpdateWithoutSiteInput = {
    package?: PackageUpdateOneRequiredWithoutSitePackagesNestedInput
  }

  export type SitePackageUncheckedUpdateWithoutSiteInput = {
    packageId?: IntFieldUpdateOperationsInput | number
  }

  export type SitePackageUncheckedUpdateManyWithoutSiteInput = {
    packageId?: IntFieldUpdateOperationsInput | number
  }

  export type SiteCreateManyCategoryInput = {
    id?: number
    regionId: number
    name: string
    description?: string | null
    city?: string | null
    postalCode?: string | null
    address?: string | null
    latitude?: Decimal | DecimalJsLike | number | string | null
    longitude?: Decimal | DecimalJsLike | number | string | null
    media?: string | null
    contact?: string | null
    information?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutSitesNestedInput
    events?: EventUpdateManyWithoutSiteNestedInput
    siteUsers?: SiteUserUpdateManyWithoutSiteNestedInput
    sitePackage?: SitePackageUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutSiteNestedInput
    siteUsers?: SiteUserUncheckedUpdateManyWithoutSiteNestedInput
    sitePackage?: SitePackageUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    regionId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    longitude?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    media?: NullableStringFieldUpdateOperationsInput | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    information?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassCreateManyPackageInput = {
    id?: number
    name: string
    codePass: string
    orderId: number
    userId: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SitePackageCreateManyPackageInput = {
    siteId: number
  }

  export type PassUpdateWithoutPackageInput = {
    name?: StringFieldUpdateOperationsInput | string
    codePass?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutPassesNestedInput
    user?: UserUpdateOneRequiredWithoutPassesNestedInput
  }

  export type PassUncheckedUpdateWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    codePass?: StringFieldUpdateOperationsInput | string
    orderId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassUncheckedUpdateManyWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    codePass?: StringFieldUpdateOperationsInput | string
    orderId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SitePackageUpdateWithoutPackageInput = {
    site?: SiteUpdateOneRequiredWithoutSitePackageNestedInput
  }

  export type SitePackageUncheckedUpdateWithoutPackageInput = {
    siteId?: IntFieldUpdateOperationsInput | number
  }

  export type SitePackageUncheckedUpdateManyWithoutPackageInput = {
    siteId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderCountOutputTypeDefaultArgs instead
     */
    export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegionCountOutputTypeDefaultArgs instead
     */
    export type RegionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SiteCountOutputTypeDefaultArgs instead
     */
    export type SiteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SiteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SiteCategoryCountOutputTypeDefaultArgs instead
     */
    export type SiteCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SiteCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PackageCountOutputTypeDefaultArgs instead
     */
    export type PackageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PackageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDefaultArgs instead
     */
    export type OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PassDefaultArgs instead
     */
    export type PassArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PassDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegionDefaultArgs instead
     */
    export type RegionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SiteDefaultArgs instead
     */
    export type SiteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SiteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SiteCategoryDefaultArgs instead
     */
    export type SiteCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SiteCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SiteUserDefaultArgs instead
     */
    export type SiteUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SiteUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PackageDefaultArgs instead
     */
    export type PackageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PackageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SitePackageDefaultArgs instead
     */
    export type SitePackageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SitePackageDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}