// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://postgres:postgres@db:5432/mydatabase"
}

model User {
  id          Int         @id @default(autoincrement())
  name        String      
  email       String      @unique @db.VarChar(255)
  password    String      
  createAt    DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  orders      Order[]
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      DateTime @default(now())
  amount    Decimal  @db.Decimal(10, 2)
  status    String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  user      User     @relation(fields: [userId], references: [id])
  passes    Pass[]
}

model Pass {
  id          Int         @id @default(autoincrement())
  packageId   Int?
  codePass    String  
  orderId     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt


  package     Package?    @relation(fields: [packageId], references: [id])
  order       Order       @relation(fields: [orderId], references: [id])
}

model Region {
  id          Int      @id @default(autoincrement())
  email       String   @unique @db.VarChar(255)
  password    String
  media       String?
  description String?
  name        String
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sites       Site[]
  packages    Package[]
  categories  SiteCategory[] // Relation avec les cat√©gories de sites
}


model Site {
  id            Int         @id @default(autoincrement())
  regionId      Int
  categoryId    Int?
  name          String
  description   String?
  city          String?
  postalCode    String?
  address       String?
  latitude      Decimal?    @db.Decimal(10,8)
  longitude     Decimal?    @db.Decimal(10,8)
  media         String?
  contact       String?
  information   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  region        Region      @relation(fields: [regionId], references: [id])
  category      SiteCategory?   @relation(fields: [categoryId], references: [id])
  events        Event[]
  siteUsers     SiteUser[]
  sitePackage   SitePackage[]
  
}
model SiteCategory {
  id         Int      @id @default(autoincrement())
  regionId   Int
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt


  sites       Site[]
  region      Region  @relation(fields: [regionId], references: [id])
}
model Event {
  id          Int      @id @default(autoincrement())
  siteId      Int
  name        String   @db.VarChar(255)
  description String?
  media       String?  @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  site        Site     @relation(fields: [siteId], references: [id])
}


model SiteUser {
  id       Int    @id @default(autoincrement())
  siteId   Int
  name     String
  email    String @unique
  password String
  
  site     Site   @relation(fields: [siteId], references: [id])
}

model Package {
  id            Int     @id @default(autoincrement())
  regionId      Int?
  price         Decimal @db.Decimal(10,2)
  description   String?
  media         String?  @db.VarChar(255)
  name          String

  passes        Pass []
  sitePackages  SitePackage[]
  region        Region? @relation(fields: [regionId], references: [id])
}

model SitePackage {
  siteId      Int
  packageId   Int


  site        Site      @relation(fields: [siteId], references: [id])
  package     Package   @relation(fields: [packageId], references: [id])

  @@id([siteId,packageId]) // Cle primaires composites
}